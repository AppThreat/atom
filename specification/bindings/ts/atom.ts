/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.23.3
 * source: atom.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace atom {
    export enum NodePropertyName {
        UNKNOWN_NODE_PROPERTY = 0,
        LINE_NUMBER = 2,
        PARSER_TYPE_NAME = 3,
        ORDER = 4,
        NAME = 5,
        FULL_NAME = 6,
        IS_EXTERNAL = 7,
        VALUE = 8,
        COLUMN_NUMBER = 11,
        LINE_NUMBER_END = 12,
        VERSION = 13,
        EVALUATION_STRATEGY = 15,
        COLUMN_NUMBER_END = 16,
        LANGUAGE = 19,
        CONTENT = 20,
        CODE = 21,
        SIGNATURE = 22,
        DISPATCH_TYPE = 25,
        MODIFIER_TYPE = 26,
        CONTROL_STRUCTURE_TYPE = 27,
        ARGUMENT_INDEX = 40,
        CLOSURE_BINDING_ID = 50,
        TYPE_FULL_NAME = 51,
        TYPE_DECL_FULL_NAME = 52,
        INHERITS_FROM_TYPE_FULL_NAME = 53,
        METHOD_FULL_NAME = 54,
        AST_PARENT_TYPE = 56,
        AST_PARENT_FULL_NAME = 57,
        DEPENDENCY_GROUP_ID = 58,
        SYMBOL = 100,
        METHOD_SHORT_NAME = 102,
        PACKAGE_NAME = 103,
        CLASS_NAME = 104,
        NODE_LABEL = 105,
        FILENAME = 106,
        OVERLAYS = 118,
        HASH = 120,
        ARGUMENT_NAME = 130,
        KEY = 131,
        CLASS_SHORT_NAME = 132,
        ALIAS_TYPE_FULL_NAME = 158,
        CLOSURE_ORIGINAL_NAME = 159,
        IS_VARIADIC = 221,
        ROOT = 1199,
        DYNAMIC_TYPE_HINT_FULL_NAME = 1591,
        INDEX = 2223,
        CANONICAL_NAME = 2001092,
        CONTAINED_REF = 2007161
    }
    export enum EdgePropertyName {
        UNKNOWN_EDGE_PROPERTY = 0,
        VARIABLE = 11
    }
    export enum ModifierTypes {
        UNKNOWN_MODIFIER_TYPE = 0,
        STATIC = 1,
        PUBLIC = 2,
        PROTECTED = 3,
        PRIVATE = 4,
        ABSTRACT = 5,
        NATIVE = 6,
        CONSTRUCTOR = 7,
        VIRTUAL = 8,
        INTERNAL = 9,
        FINAL = 10,
        READONLY = 11
    }
    export enum LANGUAGES {
        UNKNOWN_LANGUAGE = 0,
        JAVA = 1,
        JAVASCRIPT = 2,
        GOLANG = 3,
        CSHARP = 4,
        C = 5,
        PYTHON = 6,
        LLVM = 7,
        PHP = 8,
        FUZZY_TEST_LANG = 9,
        GHIDRA = 10,
        KOTLIN = 11,
        NEWC = 12,
        JAVASRC = 13,
        PYTHONSRC = 14,
        JSSRC = 15,
        SOLIDITY = 16,
        RUBYSRC = 17
    }
    export enum EvaluationStrategies {
        UNKNOWN_EVALUATION_STRATEGY = 0,
        BY_REFERENCE = 1,
        BY_SHARING = 2,
        BY_VALUE = 3
    }
    export enum DispatchTypes {
        UNKNOWN_DISPATCH_TYPE = 0,
        STATIC_DISPATCH = 1,
        DYNAMIC_DISPATCH = 2,
        INLINED = 3
    }
    export enum CONTROL_STRUCTURE_TYPES {
        UNKNOWN_CONTROL_STRUCTURE_TYPE = 0,
        BREAK = 1,
        CONTINUE = 2,
        WHILE = 3,
        DO = 4,
        FOR = 5,
        GOTO = 6,
        IF = 7,
        ELSE = 8,
        SWITCH = 9,
        TRY = 10,
        THROW = 11,
        MATCH = 12,
        YIELD = 13
    }
    export enum NodeType {
        UNKNOWN_NODE_TYPE = 0,
        METHOD = 1,
        METHOD_RETURN = 3,
        ANNOTATION = 5,
        ANNOTATION_PARAMETER_ASSIGN = 6,
        ANNOTATION_PARAMETER = 7,
        LITERAL = 8,
        MEMBER = 9,
        ARRAY_INITIALIZER = 14,
        CALL = 15,
        LOCAL = 23,
        TAG = 24,
        LOCATION = 25,
        IDENTIFIER = 27,
        RETURN = 30,
        BLOCK = 31,
        METHOD_PARAMETER_OUT = 33,
        METHOD_PARAMETER_IN = 34,
        DEPENDENCY = 35,
        FILE = 38,
        META_DATA = 39,
        NAMESPACE = 40,
        NAMESPACE_BLOCK = 41,
        UNKNOWN = 44,
        TYPE = 45,
        TYPE_DECL = 46,
        TYPE_PARAMETER = 47,
        TYPE_ARGUMENT = 48,
        ANNOTATION_LITERAL = 49,
        CONFIG_FILE = 50,
        BINDING = 146,
        TAG_NODE_PAIR = 208,
        FINDING = 214,
        KEY_VALUE_PAIR = 217,
        MODIFIER = 300,
        METHOD_REF = 333,
        CLOSURE_BINDING = 334,
        TYPE_REF = 335,
        CONTROL_STRUCTURE = 339,
        JUMP_TARGET = 340,
        JUMP_LABEL = 341,
        TEMPLATE_DOM = 417,
        COMMENT = 511,
        FIELD_IDENTIFIER = 2001081
    }
    export class PropertyValue extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]];
        constructor(data?: any[] | ({} & (({
            string_value?: string;
            bool_value?: never;
            int_value?: never;
            long_value?: never;
            float_value?: never;
            double_value?: never;
            string_list?: never;
            bool_list?: never;
            int_list?: never;
            long_list?: never;
            float_list?: never;
            double_list?: never;
            contained_refs?: never;
        } | {
            string_value?: never;
            bool_value?: boolean;
            int_value?: never;
            long_value?: never;
            float_value?: never;
            double_value?: never;
            string_list?: never;
            bool_list?: never;
            int_list?: never;
            long_list?: never;
            float_list?: never;
            double_list?: never;
            contained_refs?: never;
        } | {
            string_value?: never;
            bool_value?: never;
            int_value?: number;
            long_value?: never;
            float_value?: never;
            double_value?: never;
            string_list?: never;
            bool_list?: never;
            int_list?: never;
            long_list?: never;
            float_list?: never;
            double_list?: never;
            contained_refs?: never;
        } | {
            string_value?: never;
            bool_value?: never;
            int_value?: never;
            long_value?: number;
            float_value?: never;
            double_value?: never;
            string_list?: never;
            bool_list?: never;
            int_list?: never;
            long_list?: never;
            float_list?: never;
            double_list?: never;
            contained_refs?: never;
        } | {
            string_value?: never;
            bool_value?: never;
            int_value?: never;
            long_value?: never;
            float_value?: number;
            double_value?: never;
            string_list?: never;
            bool_list?: never;
            int_list?: never;
            long_list?: never;
            float_list?: never;
            double_list?: never;
            contained_refs?: never;
        } | {
            string_value?: never;
            bool_value?: never;
            int_value?: never;
            long_value?: never;
            float_value?: never;
            double_value?: number;
            string_list?: never;
            bool_list?: never;
            int_list?: never;
            long_list?: never;
            float_list?: never;
            double_list?: never;
            contained_refs?: never;
        } | {
            string_value?: never;
            bool_value?: never;
            int_value?: never;
            long_value?: never;
            float_value?: never;
            double_value?: never;
            string_list?: StringList;
            bool_list?: never;
            int_list?: never;
            long_list?: never;
            float_list?: never;
            double_list?: never;
            contained_refs?: never;
        } | {
            string_value?: never;
            bool_value?: never;
            int_value?: never;
            long_value?: never;
            float_value?: never;
            double_value?: never;
            string_list?: never;
            bool_list?: BoolList;
            int_list?: never;
            long_list?: never;
            float_list?: never;
            double_list?: never;
            contained_refs?: never;
        } | {
            string_value?: never;
            bool_value?: never;
            int_value?: never;
            long_value?: never;
            float_value?: never;
            double_value?: never;
            string_list?: never;
            bool_list?: never;
            int_list?: IntList;
            long_list?: never;
            float_list?: never;
            double_list?: never;
            contained_refs?: never;
        } | {
            string_value?: never;
            bool_value?: never;
            int_value?: never;
            long_value?: never;
            float_value?: never;
            double_value?: never;
            string_list?: never;
            bool_list?: never;
            int_list?: never;
            long_list?: LongList;
            float_list?: never;
            double_list?: never;
            contained_refs?: never;
        } | {
            string_value?: never;
            bool_value?: never;
            int_value?: never;
            long_value?: never;
            float_value?: never;
            double_value?: never;
            string_list?: never;
            bool_list?: never;
            int_list?: never;
            long_list?: never;
            float_list?: FloatList;
            double_list?: never;
            contained_refs?: never;
        } | {
            string_value?: never;
            bool_value?: never;
            int_value?: never;
            long_value?: never;
            float_value?: never;
            double_value?: never;
            string_list?: never;
            bool_list?: never;
            int_list?: never;
            long_list?: never;
            float_list?: never;
            double_list?: DoubleList;
            contained_refs?: never;
        } | {
            string_value?: never;
            bool_value?: never;
            int_value?: never;
            long_value?: never;
            float_value?: never;
            double_value?: never;
            string_list?: never;
            bool_list?: never;
            int_list?: never;
            long_list?: never;
            float_list?: never;
            double_list?: never;
            contained_refs?: ContainedRefs;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("string_value" in data && data.string_value != undefined) {
                    this.string_value = data.string_value;
                }
                if ("bool_value" in data && data.bool_value != undefined) {
                    this.bool_value = data.bool_value;
                }
                if ("int_value" in data && data.int_value != undefined) {
                    this.int_value = data.int_value;
                }
                if ("long_value" in data && data.long_value != undefined) {
                    this.long_value = data.long_value;
                }
                if ("float_value" in data && data.float_value != undefined) {
                    this.float_value = data.float_value;
                }
                if ("double_value" in data && data.double_value != undefined) {
                    this.double_value = data.double_value;
                }
                if ("string_list" in data && data.string_list != undefined) {
                    this.string_list = data.string_list;
                }
                if ("bool_list" in data && data.bool_list != undefined) {
                    this.bool_list = data.bool_list;
                }
                if ("int_list" in data && data.int_list != undefined) {
                    this.int_list = data.int_list;
                }
                if ("long_list" in data && data.long_list != undefined) {
                    this.long_list = data.long_list;
                }
                if ("float_list" in data && data.float_list != undefined) {
                    this.float_list = data.float_list;
                }
                if ("double_list" in data && data.double_list != undefined) {
                    this.double_list = data.double_list;
                }
                if ("contained_refs" in data && data.contained_refs != undefined) {
                    this.contained_refs = data.contained_refs;
                }
            }
        }
        get string_value() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set string_value(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_string_value() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get bool_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set bool_value(value: boolean) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_bool_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get int_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set int_value(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_int_value() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get long_value() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set long_value(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[0], value);
        }
        get has_long_value() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get float_value() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set float_value(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
        }
        get has_float_value() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get double_value() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set double_value(value: number) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[0], value);
        }
        get has_double_value() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get string_list() {
            return pb_1.Message.getWrapperField(this, StringList, 7) as StringList;
        }
        set string_list(value: StringList) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_string_list() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get bool_list() {
            return pb_1.Message.getWrapperField(this, BoolList, 8) as BoolList;
        }
        set bool_list(value: BoolList) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_bool_list() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get int_list() {
            return pb_1.Message.getWrapperField(this, IntList, 9) as IntList;
        }
        set int_list(value: IntList) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_int_list() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get long_list() {
            return pb_1.Message.getWrapperField(this, LongList, 10) as LongList;
        }
        set long_list(value: LongList) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_long_list() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get float_list() {
            return pb_1.Message.getWrapperField(this, FloatList, 11) as FloatList;
        }
        set float_list(value: FloatList) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_float_list() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get double_list() {
            return pb_1.Message.getWrapperField(this, DoubleList, 12) as DoubleList;
        }
        set double_list(value: DoubleList) {
            pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
        }
        get has_double_list() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get contained_refs() {
            return pb_1.Message.getWrapperField(this, ContainedRefs, 13) as ContainedRefs;
        }
        set contained_refs(value: ContainedRefs) {
            pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
        }
        get has_contained_refs() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get value() {
            const cases: {
                [index: number]: "none" | "string_value" | "bool_value" | "int_value" | "long_value" | "float_value" | "double_value" | "string_list" | "bool_list" | "int_list" | "long_list" | "float_list" | "double_list" | "contained_refs";
            } = {
                0: "none",
                1: "string_value",
                2: "bool_value",
                3: "int_value",
                4: "long_value",
                5: "float_value",
                6: "double_value",
                7: "string_list",
                8: "bool_list",
                9: "int_list",
                10: "long_list",
                11: "float_list",
                12: "double_list",
                13: "contained_refs"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])];
        }
        static fromObject(data: {
            string_value?: string;
            bool_value?: boolean;
            int_value?: number;
            long_value?: number;
            float_value?: number;
            double_value?: number;
            string_list?: ReturnType<typeof StringList.prototype.toObject>;
            bool_list?: ReturnType<typeof BoolList.prototype.toObject>;
            int_list?: ReturnType<typeof IntList.prototype.toObject>;
            long_list?: ReturnType<typeof LongList.prototype.toObject>;
            float_list?: ReturnType<typeof FloatList.prototype.toObject>;
            double_list?: ReturnType<typeof DoubleList.prototype.toObject>;
            contained_refs?: ReturnType<typeof ContainedRefs.prototype.toObject>;
        }): PropertyValue {
            const message = new PropertyValue({});
            if (data.string_value != null) {
                message.string_value = data.string_value;
            }
            if (data.bool_value != null) {
                message.bool_value = data.bool_value;
            }
            if (data.int_value != null) {
                message.int_value = data.int_value;
            }
            if (data.long_value != null) {
                message.long_value = data.long_value;
            }
            if (data.float_value != null) {
                message.float_value = data.float_value;
            }
            if (data.double_value != null) {
                message.double_value = data.double_value;
            }
            if (data.string_list != null) {
                message.string_list = StringList.fromObject(data.string_list);
            }
            if (data.bool_list != null) {
                message.bool_list = BoolList.fromObject(data.bool_list);
            }
            if (data.int_list != null) {
                message.int_list = IntList.fromObject(data.int_list);
            }
            if (data.long_list != null) {
                message.long_list = LongList.fromObject(data.long_list);
            }
            if (data.float_list != null) {
                message.float_list = FloatList.fromObject(data.float_list);
            }
            if (data.double_list != null) {
                message.double_list = DoubleList.fromObject(data.double_list);
            }
            if (data.contained_refs != null) {
                message.contained_refs = ContainedRefs.fromObject(data.contained_refs);
            }
            return message;
        }
        toObject() {
            const data: {
                string_value?: string;
                bool_value?: boolean;
                int_value?: number;
                long_value?: number;
                float_value?: number;
                double_value?: number;
                string_list?: ReturnType<typeof StringList.prototype.toObject>;
                bool_list?: ReturnType<typeof BoolList.prototype.toObject>;
                int_list?: ReturnType<typeof IntList.prototype.toObject>;
                long_list?: ReturnType<typeof LongList.prototype.toObject>;
                float_list?: ReturnType<typeof FloatList.prototype.toObject>;
                double_list?: ReturnType<typeof DoubleList.prototype.toObject>;
                contained_refs?: ReturnType<typeof ContainedRefs.prototype.toObject>;
            } = {};
            if (this.string_value != null) {
                data.string_value = this.string_value;
            }
            if (this.bool_value != null) {
                data.bool_value = this.bool_value;
            }
            if (this.int_value != null) {
                data.int_value = this.int_value;
            }
            if (this.long_value != null) {
                data.long_value = this.long_value;
            }
            if (this.float_value != null) {
                data.float_value = this.float_value;
            }
            if (this.double_value != null) {
                data.double_value = this.double_value;
            }
            if (this.string_list != null) {
                data.string_list = this.string_list.toObject();
            }
            if (this.bool_list != null) {
                data.bool_list = this.bool_list.toObject();
            }
            if (this.int_list != null) {
                data.int_list = this.int_list.toObject();
            }
            if (this.long_list != null) {
                data.long_list = this.long_list.toObject();
            }
            if (this.float_list != null) {
                data.float_list = this.float_list.toObject();
            }
            if (this.double_list != null) {
                data.double_list = this.double_list.toObject();
            }
            if (this.contained_refs != null) {
                data.contained_refs = this.contained_refs.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_string_value)
                writer.writeString(1, this.string_value);
            if (this.has_bool_value)
                writer.writeBool(2, this.bool_value);
            if (this.has_int_value)
                writer.writeInt32(3, this.int_value);
            if (this.has_long_value)
                writer.writeInt64(4, this.long_value);
            if (this.has_float_value)
                writer.writeFloat(5, this.float_value);
            if (this.has_double_value)
                writer.writeDouble(6, this.double_value);
            if (this.has_string_list)
                writer.writeMessage(7, this.string_list, () => this.string_list.serialize(writer));
            if (this.has_bool_list)
                writer.writeMessage(8, this.bool_list, () => this.bool_list.serialize(writer));
            if (this.has_int_list)
                writer.writeMessage(9, this.int_list, () => this.int_list.serialize(writer));
            if (this.has_long_list)
                writer.writeMessage(10, this.long_list, () => this.long_list.serialize(writer));
            if (this.has_float_list)
                writer.writeMessage(11, this.float_list, () => this.float_list.serialize(writer));
            if (this.has_double_list)
                writer.writeMessage(12, this.double_list, () => this.double_list.serialize(writer));
            if (this.has_contained_refs)
                writer.writeMessage(13, this.contained_refs, () => this.contained_refs.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PropertyValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PropertyValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.string_value = reader.readString();
                        break;
                    case 2:
                        message.bool_value = reader.readBool();
                        break;
                    case 3:
                        message.int_value = reader.readInt32();
                        break;
                    case 4:
                        message.long_value = reader.readInt64();
                        break;
                    case 5:
                        message.float_value = reader.readFloat();
                        break;
                    case 6:
                        message.double_value = reader.readDouble();
                        break;
                    case 7:
                        reader.readMessage(message.string_list, () => message.string_list = StringList.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.bool_list, () => message.bool_list = BoolList.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.int_list, () => message.int_list = IntList.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.long_list, () => message.long_list = LongList.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.float_list, () => message.float_list = FloatList.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.double_list, () => message.double_list = DoubleList.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.contained_refs, () => message.contained_refs = ContainedRefs.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PropertyValue {
            return PropertyValue.deserialize(bytes);
        }
    }
    export class ContainedRefs extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            local_name?: string;
            refs?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("local_name" in data && data.local_name != undefined) {
                    this.local_name = data.local_name;
                }
                if ("refs" in data && data.refs != undefined) {
                    this.refs = data.refs;
                }
            }
        }
        get local_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set local_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get refs() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set refs(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            local_name?: string;
            refs?: number[];
        }): ContainedRefs {
            const message = new ContainedRefs({});
            if (data.local_name != null) {
                message.local_name = data.local_name;
            }
            if (data.refs != null) {
                message.refs = data.refs;
            }
            return message;
        }
        toObject() {
            const data: {
                local_name?: string;
                refs?: number[];
            } = {};
            if (this.local_name != null) {
                data.local_name = this.local_name;
            }
            if (this.refs != null) {
                data.refs = this.refs;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.local_name.length)
                writer.writeString(1, this.local_name);
            if (this.refs.length)
                writer.writePackedInt64(2, this.refs);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContainedRefs {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContainedRefs();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.local_name = reader.readString();
                        break;
                    case 2:
                        message.refs = reader.readPackedInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContainedRefs {
            return ContainedRefs.deserialize(bytes);
        }
    }
    export class StringList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            values?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("values" in data && data.values != undefined) {
                    this.values = data.values;
                }
            }
        }
        get values() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set values(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            values?: string[];
        }): StringList {
            const message = new StringList({});
            if (data.values != null) {
                message.values = data.values;
            }
            return message;
        }
        toObject() {
            const data: {
                values?: string[];
            } = {};
            if (this.values != null) {
                data.values = this.values;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.values.length)
                writer.writeRepeatedString(1, this.values);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StringList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StringList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StringList {
            return StringList.deserialize(bytes);
        }
    }
    export class BoolList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            values?: boolean[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("values" in data && data.values != undefined) {
                    this.values = data.values;
                }
            }
        }
        get values() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as boolean[];
        }
        set values(value: boolean[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            values?: boolean[];
        }): BoolList {
            const message = new BoolList({});
            if (data.values != null) {
                message.values = data.values;
            }
            return message;
        }
        toObject() {
            const data: {
                values?: boolean[];
            } = {};
            if (this.values != null) {
                data.values = this.values;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.values.length)
                writer.writePackedBool(1, this.values);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoolList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoolList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.values = reader.readPackedBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BoolList {
            return BoolList.deserialize(bytes);
        }
    }
    export class IntList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            values?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("values" in data && data.values != undefined) {
                    this.values = data.values;
                }
            }
        }
        get values() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set values(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            values?: number[];
        }): IntList {
            const message = new IntList({});
            if (data.values != null) {
                message.values = data.values;
            }
            return message;
        }
        toObject() {
            const data: {
                values?: number[];
            } = {};
            if (this.values != null) {
                data.values = this.values;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.values.length)
                writer.writePackedInt32(1, this.values);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IntList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IntList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.values = reader.readPackedInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IntList {
            return IntList.deserialize(bytes);
        }
    }
    export class LongList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            values?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("values" in data && data.values != undefined) {
                    this.values = data.values;
                }
            }
        }
        get values() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set values(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            values?: number[];
        }): LongList {
            const message = new LongList({});
            if (data.values != null) {
                message.values = data.values;
            }
            return message;
        }
        toObject() {
            const data: {
                values?: number[];
            } = {};
            if (this.values != null) {
                data.values = this.values;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.values.length)
                writer.writePackedInt64(1, this.values);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LongList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LongList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.values = reader.readPackedInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LongList {
            return LongList.deserialize(bytes);
        }
    }
    export class FloatList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            values?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("values" in data && data.values != undefined) {
                    this.values = data.values;
                }
            }
        }
        get values() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set values(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            values?: number[];
        }): FloatList {
            const message = new FloatList({});
            if (data.values != null) {
                message.values = data.values;
            }
            return message;
        }
        toObject() {
            const data: {
                values?: number[];
            } = {};
            if (this.values != null) {
                data.values = this.values;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.values.length)
                writer.writePackedFloat(1, this.values);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FloatList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FloatList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.values = reader.readPackedFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FloatList {
            return FloatList.deserialize(bytes);
        }
    }
    export class DoubleList extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            values?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("values" in data && data.values != undefined) {
                    this.values = data.values;
                }
            }
        }
        get values() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set values(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            values?: number[];
        }): DoubleList {
            const message = new DoubleList({});
            if (data.values != null) {
                message.values = data.values;
            }
            return message;
        }
        toObject() {
            const data: {
                values?: number[];
            } = {};
            if (this.values != null) {
                data.values = this.values;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.values.length)
                writer.writePackedDouble(1, this.values);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DoubleList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DoubleList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.values = reader.readPackedDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DoubleList {
            return DoubleList.deserialize(bytes);
        }
    }
    export class CpgStruct extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            node?: CpgStruct.Node[];
            edge?: CpgStruct.Edge[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("node" in data && data.node != undefined) {
                    this.node = data.node;
                }
                if ("edge" in data && data.edge != undefined) {
                    this.edge = data.edge;
                }
            }
        }
        get node() {
            return pb_1.Message.getRepeatedWrapperField(this, CpgStruct.Node, 1) as CpgStruct.Node[];
        }
        set node(value: CpgStruct.Node[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get edge() {
            return pb_1.Message.getRepeatedWrapperField(this, CpgStruct.Edge, 2) as CpgStruct.Edge[];
        }
        set edge(value: CpgStruct.Edge[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            node?: ReturnType<typeof CpgStruct.Node.prototype.toObject>[];
            edge?: ReturnType<typeof CpgStruct.Edge.prototype.toObject>[];
        }): CpgStruct {
            const message = new CpgStruct({});
            if (data.node != null) {
                message.node = data.node.map(item => CpgStruct.Node.fromObject(item));
            }
            if (data.edge != null) {
                message.edge = data.edge.map(item => CpgStruct.Edge.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                node?: ReturnType<typeof CpgStruct.Node.prototype.toObject>[];
                edge?: ReturnType<typeof CpgStruct.Edge.prototype.toObject>[];
            } = {};
            if (this.node != null) {
                data.node = this.node.map((item: CpgStruct.Node) => item.toObject());
            }
            if (this.edge != null) {
                data.edge = this.edge.map((item: CpgStruct.Edge) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.node.length)
                writer.writeRepeatedMessage(1, this.node, (item: CpgStruct.Node) => item.serialize(writer));
            if (this.edge.length)
                writer.writeRepeatedMessage(2, this.edge, (item: CpgStruct.Edge) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CpgStruct {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CpgStruct();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.node, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CpgStruct.Node.deserialize(reader), CpgStruct.Node));
                        break;
                    case 2:
                        reader.readMessage(message.edge, () => pb_1.Message.addToRepeatedWrapperField(message, 2, CpgStruct.Edge.deserialize(reader), CpgStruct.Edge));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CpgStruct {
            return CpgStruct.deserialize(bytes);
        }
    }
    export namespace CpgStruct {
        export class Node extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                key?: number;
                type?: NodeType;
                property?: CpgStruct.Node.Property[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("key" in data && data.key != undefined) {
                        this.key = data.key;
                    }
                    if ("type" in data && data.type != undefined) {
                        this.type = data.type;
                    }
                    if ("property" in data && data.property != undefined) {
                        this.property = data.property;
                    }
                }
            }
            get key() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set key(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get type() {
                return pb_1.Message.getFieldWithDefault(this, 2, NodeType.UNKNOWN_NODE_TYPE) as NodeType;
            }
            set type(value: NodeType) {
                pb_1.Message.setField(this, 2, value);
            }
            get property() {
                return pb_1.Message.getRepeatedWrapperField(this, CpgStruct.Node.Property, 3) as CpgStruct.Node.Property[];
            }
            set property(value: CpgStruct.Node.Property[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            static fromObject(data: {
                key?: number;
                type?: NodeType;
                property?: ReturnType<typeof CpgStruct.Node.Property.prototype.toObject>[];
            }): Node {
                const message = new Node({});
                if (data.key != null) {
                    message.key = data.key;
                }
                if (data.type != null) {
                    message.type = data.type;
                }
                if (data.property != null) {
                    message.property = data.property.map(item => CpgStruct.Node.Property.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    key?: number;
                    type?: NodeType;
                    property?: ReturnType<typeof CpgStruct.Node.Property.prototype.toObject>[];
                } = {};
                if (this.key != null) {
                    data.key = this.key;
                }
                if (this.type != null) {
                    data.type = this.type;
                }
                if (this.property != null) {
                    data.property = this.property.map((item: CpgStruct.Node.Property) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.key != 0)
                    writer.writeInt64(1, this.key);
                if (this.type != NodeType.UNKNOWN_NODE_TYPE)
                    writer.writeEnum(2, this.type);
                if (this.property.length)
                    writer.writeRepeatedMessage(3, this.property, (item: CpgStruct.Node.Property) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Node {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Node();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.key = reader.readInt64();
                            break;
                        case 2:
                            message.type = reader.readEnum();
                            break;
                        case 3:
                            reader.readMessage(message.property, () => pb_1.Message.addToRepeatedWrapperField(message, 3, CpgStruct.Node.Property.deserialize(reader), CpgStruct.Node.Property));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Node {
                return Node.deserialize(bytes);
            }
        }
        export namespace Node {
            export class Property extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    name?: NodePropertyName;
                    value?: PropertyValue;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("name" in data && data.name != undefined) {
                            this.name = data.name;
                        }
                        if ("value" in data && data.value != undefined) {
                            this.value = data.value;
                        }
                    }
                }
                get name() {
                    return pb_1.Message.getFieldWithDefault(this, 1, NodePropertyName.UNKNOWN_NODE_PROPERTY) as NodePropertyName;
                }
                set name(value: NodePropertyName) {
                    pb_1.Message.setField(this, 1, value);
                }
                get value() {
                    return pb_1.Message.getWrapperField(this, PropertyValue, 2) as PropertyValue;
                }
                set value(value: PropertyValue) {
                    pb_1.Message.setWrapperField(this, 2, value);
                }
                get has_value() {
                    return pb_1.Message.getField(this, 2) != null;
                }
                static fromObject(data: {
                    name?: NodePropertyName;
                    value?: ReturnType<typeof PropertyValue.prototype.toObject>;
                }): Property {
                    const message = new Property({});
                    if (data.name != null) {
                        message.name = data.name;
                    }
                    if (data.value != null) {
                        message.value = PropertyValue.fromObject(data.value);
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        name?: NodePropertyName;
                        value?: ReturnType<typeof PropertyValue.prototype.toObject>;
                    } = {};
                    if (this.name != null) {
                        data.name = this.name;
                    }
                    if (this.value != null) {
                        data.value = this.value.toObject();
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.name != NodePropertyName.UNKNOWN_NODE_PROPERTY)
                        writer.writeEnum(1, this.name);
                    if (this.has_value)
                        writer.writeMessage(2, this.value, () => this.value.serialize(writer));
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Property {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Property();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.name = reader.readEnum();
                                break;
                            case 2:
                                reader.readMessage(message.value, () => message.value = PropertyValue.deserialize(reader));
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): Property {
                    return Property.deserialize(bytes);
                }
            }
        }
        export class Edge extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                src?: number;
                dst?: number;
                type?: CpgStruct.Edge.EdgeType;
                property?: CpgStruct.Edge.Property[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("src" in data && data.src != undefined) {
                        this.src = data.src;
                    }
                    if ("dst" in data && data.dst != undefined) {
                        this.dst = data.dst;
                    }
                    if ("type" in data && data.type != undefined) {
                        this.type = data.type;
                    }
                    if ("property" in data && data.property != undefined) {
                        this.property = data.property;
                    }
                }
            }
            get src() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set src(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get dst() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set dst(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get type() {
                return pb_1.Message.getFieldWithDefault(this, 3, CpgStruct.Edge.EdgeType.UNKNOWN_EDGE_TYPE) as CpgStruct.Edge.EdgeType;
            }
            set type(value: CpgStruct.Edge.EdgeType) {
                pb_1.Message.setField(this, 3, value);
            }
            get property() {
                return pb_1.Message.getRepeatedWrapperField(this, CpgStruct.Edge.Property, 4) as CpgStruct.Edge.Property[];
            }
            set property(value: CpgStruct.Edge.Property[]) {
                pb_1.Message.setRepeatedWrapperField(this, 4, value);
            }
            static fromObject(data: {
                src?: number;
                dst?: number;
                type?: CpgStruct.Edge.EdgeType;
                property?: ReturnType<typeof CpgStruct.Edge.Property.prototype.toObject>[];
            }): Edge {
                const message = new Edge({});
                if (data.src != null) {
                    message.src = data.src;
                }
                if (data.dst != null) {
                    message.dst = data.dst;
                }
                if (data.type != null) {
                    message.type = data.type;
                }
                if (data.property != null) {
                    message.property = data.property.map(item => CpgStruct.Edge.Property.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    src?: number;
                    dst?: number;
                    type?: CpgStruct.Edge.EdgeType;
                    property?: ReturnType<typeof CpgStruct.Edge.Property.prototype.toObject>[];
                } = {};
                if (this.src != null) {
                    data.src = this.src;
                }
                if (this.dst != null) {
                    data.dst = this.dst;
                }
                if (this.type != null) {
                    data.type = this.type;
                }
                if (this.property != null) {
                    data.property = this.property.map((item: CpgStruct.Edge.Property) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.src != 0)
                    writer.writeInt64(1, this.src);
                if (this.dst != 0)
                    writer.writeInt64(2, this.dst);
                if (this.type != CpgStruct.Edge.EdgeType.UNKNOWN_EDGE_TYPE)
                    writer.writeEnum(3, this.type);
                if (this.property.length)
                    writer.writeRepeatedMessage(4, this.property, (item: CpgStruct.Edge.Property) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Edge {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Edge();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.src = reader.readInt64();
                            break;
                        case 2:
                            message.dst = reader.readInt64();
                            break;
                        case 3:
                            message.type = reader.readEnum();
                            break;
                        case 4:
                            reader.readMessage(message.property, () => pb_1.Message.addToRepeatedWrapperField(message, 4, CpgStruct.Edge.Property.deserialize(reader), CpgStruct.Edge.Property));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Edge {
                return Edge.deserialize(bytes);
            }
        }
        export namespace Edge {
            export enum EdgeType {
                UNKNOWN_EDGE_TYPE = 0,
                AST = 3,
                CALL = 6,
                REF = 10,
                TAGGED_BY = 11,
                PARAMETER_LINK = 12,
                CFG = 19,
                EVAL_TYPE = 21,
                BINDS_TO = 22,
                INHERITS_FROM = 23,
                CONTAINS = 28,
                CAPTURE = 40,
                CAPTURED_BY = 41,
                RECEIVER = 55,
                CONDITION = 56,
                REACHING_DEF = 137,
                ALIAS_OF = 138,
                BINDS = 155,
                ARGUMENT = 156,
                SOURCE_FILE = 157,
                DOMINATE = 181,
                POST_DOMINATE = 182,
                CDG = 183,
                IMPORTS = 23663,
                IS_CALL_FOR_IMPORT = 23664
            }
            export class Property extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    name?: EdgePropertyName;
                    value?: PropertyValue;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("name" in data && data.name != undefined) {
                            this.name = data.name;
                        }
                        if ("value" in data && data.value != undefined) {
                            this.value = data.value;
                        }
                    }
                }
                get name() {
                    return pb_1.Message.getFieldWithDefault(this, 1, EdgePropertyName.UNKNOWN_EDGE_PROPERTY) as EdgePropertyName;
                }
                set name(value: EdgePropertyName) {
                    pb_1.Message.setField(this, 1, value);
                }
                get value() {
                    return pb_1.Message.getWrapperField(this, PropertyValue, 2) as PropertyValue;
                }
                set value(value: PropertyValue) {
                    pb_1.Message.setWrapperField(this, 2, value);
                }
                get has_value() {
                    return pb_1.Message.getField(this, 2) != null;
                }
                static fromObject(data: {
                    name?: EdgePropertyName;
                    value?: ReturnType<typeof PropertyValue.prototype.toObject>;
                }): Property {
                    const message = new Property({});
                    if (data.name != null) {
                        message.name = data.name;
                    }
                    if (data.value != null) {
                        message.value = PropertyValue.fromObject(data.value);
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        name?: EdgePropertyName;
                        value?: ReturnType<typeof PropertyValue.prototype.toObject>;
                    } = {};
                    if (this.name != null) {
                        data.name = this.name;
                    }
                    if (this.value != null) {
                        data.value = this.value.toObject();
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.name != EdgePropertyName.UNKNOWN_EDGE_PROPERTY)
                        writer.writeEnum(1, this.name);
                    if (this.has_value)
                        writer.writeMessage(2, this.value, () => this.value.serialize(writer));
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Property {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Property();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.name = reader.readEnum();
                                break;
                            case 2:
                                reader.readMessage(message.value, () => message.value = PropertyValue.deserialize(reader));
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): Property {
                    return Property.deserialize(bytes);
                }
            }
        }
    }
    export class AdditionalNodeProperty extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            node_id?: number;
            property?: CpgStruct.Node.Property;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("node_id" in data && data.node_id != undefined) {
                    this.node_id = data.node_id;
                }
                if ("property" in data && data.property != undefined) {
                    this.property = data.property;
                }
            }
        }
        get node_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set node_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get property() {
            return pb_1.Message.getWrapperField(this, CpgStruct.Node.Property, 2) as CpgStruct.Node.Property;
        }
        set property(value: CpgStruct.Node.Property) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_property() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            node_id?: number;
            property?: ReturnType<typeof CpgStruct.Node.Property.prototype.toObject>;
        }): AdditionalNodeProperty {
            const message = new AdditionalNodeProperty({});
            if (data.node_id != null) {
                message.node_id = data.node_id;
            }
            if (data.property != null) {
                message.property = CpgStruct.Node.Property.fromObject(data.property);
            }
            return message;
        }
        toObject() {
            const data: {
                node_id?: number;
                property?: ReturnType<typeof CpgStruct.Node.Property.prototype.toObject>;
            } = {};
            if (this.node_id != null) {
                data.node_id = this.node_id;
            }
            if (this.property != null) {
                data.property = this.property.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.node_id != 0)
                writer.writeInt64(1, this.node_id);
            if (this.has_property)
                writer.writeMessage(2, this.property, () => this.property.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdditionalNodeProperty {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdditionalNodeProperty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.node_id = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.property, () => message.property = CpgStruct.Node.Property.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AdditionalNodeProperty {
            return AdditionalNodeProperty.deserialize(bytes);
        }
    }
    export class AdditionalEdgeProperty extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            edge_id?: number;
            property?: CpgStruct.Edge.Property;
            out_node_key?: number;
            in_node_key?: number;
            edge_type?: CpgStruct.Edge.EdgeType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("edge_id" in data && data.edge_id != undefined) {
                    this.edge_id = data.edge_id;
                }
                if ("property" in data && data.property != undefined) {
                    this.property = data.property;
                }
                if ("out_node_key" in data && data.out_node_key != undefined) {
                    this.out_node_key = data.out_node_key;
                }
                if ("in_node_key" in data && data.in_node_key != undefined) {
                    this.in_node_key = data.in_node_key;
                }
                if ("edge_type" in data && data.edge_type != undefined) {
                    this.edge_type = data.edge_type;
                }
            }
        }
        get edge_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set edge_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get property() {
            return pb_1.Message.getWrapperField(this, CpgStruct.Edge.Property, 2) as CpgStruct.Edge.Property;
        }
        set property(value: CpgStruct.Edge.Property) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_property() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get out_node_key() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set out_node_key(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get in_node_key() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set in_node_key(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get edge_type() {
            return pb_1.Message.getFieldWithDefault(this, 5, CpgStruct.Edge.EdgeType.UNKNOWN_EDGE_TYPE) as CpgStruct.Edge.EdgeType;
        }
        set edge_type(value: CpgStruct.Edge.EdgeType) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            edge_id?: number;
            property?: ReturnType<typeof CpgStruct.Edge.Property.prototype.toObject>;
            out_node_key?: number;
            in_node_key?: number;
            edge_type?: CpgStruct.Edge.EdgeType;
        }): AdditionalEdgeProperty {
            const message = new AdditionalEdgeProperty({});
            if (data.edge_id != null) {
                message.edge_id = data.edge_id;
            }
            if (data.property != null) {
                message.property = CpgStruct.Edge.Property.fromObject(data.property);
            }
            if (data.out_node_key != null) {
                message.out_node_key = data.out_node_key;
            }
            if (data.in_node_key != null) {
                message.in_node_key = data.in_node_key;
            }
            if (data.edge_type != null) {
                message.edge_type = data.edge_type;
            }
            return message;
        }
        toObject() {
            const data: {
                edge_id?: number;
                property?: ReturnType<typeof CpgStruct.Edge.Property.prototype.toObject>;
                out_node_key?: number;
                in_node_key?: number;
                edge_type?: CpgStruct.Edge.EdgeType;
            } = {};
            if (this.edge_id != null) {
                data.edge_id = this.edge_id;
            }
            if (this.property != null) {
                data.property = this.property.toObject();
            }
            if (this.out_node_key != null) {
                data.out_node_key = this.out_node_key;
            }
            if (this.in_node_key != null) {
                data.in_node_key = this.in_node_key;
            }
            if (this.edge_type != null) {
                data.edge_type = this.edge_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.edge_id != 0)
                writer.writeInt64(1, this.edge_id);
            if (this.has_property)
                writer.writeMessage(2, this.property, () => this.property.serialize(writer));
            if (this.out_node_key != 0)
                writer.writeInt64(3, this.out_node_key);
            if (this.in_node_key != 0)
                writer.writeInt64(4, this.in_node_key);
            if (this.edge_type != CpgStruct.Edge.EdgeType.UNKNOWN_EDGE_TYPE)
                writer.writeEnum(5, this.edge_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdditionalEdgeProperty {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdditionalEdgeProperty();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.edge_id = reader.readInt64();
                        break;
                    case 2:
                        reader.readMessage(message.property, () => message.property = CpgStruct.Edge.Property.deserialize(reader));
                        break;
                    case 3:
                        message.out_node_key = reader.readInt64();
                        break;
                    case 4:
                        message.in_node_key = reader.readInt64();
                        break;
                    case 5:
                        message.edge_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AdditionalEdgeProperty {
            return AdditionalEdgeProperty.deserialize(bytes);
        }
    }
    export class CpgOverlay extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            node?: CpgStruct.Node[];
            edge?: CpgStruct.Edge[];
            node_property?: AdditionalNodeProperty[];
            edge_property?: AdditionalEdgeProperty[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("node" in data && data.node != undefined) {
                    this.node = data.node;
                }
                if ("edge" in data && data.edge != undefined) {
                    this.edge = data.edge;
                }
                if ("node_property" in data && data.node_property != undefined) {
                    this.node_property = data.node_property;
                }
                if ("edge_property" in data && data.edge_property != undefined) {
                    this.edge_property = data.edge_property;
                }
            }
        }
        get node() {
            return pb_1.Message.getRepeatedWrapperField(this, CpgStruct.Node, 1) as CpgStruct.Node[];
        }
        set node(value: CpgStruct.Node[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get edge() {
            return pb_1.Message.getRepeatedWrapperField(this, CpgStruct.Edge, 2) as CpgStruct.Edge[];
        }
        set edge(value: CpgStruct.Edge[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get node_property() {
            return pb_1.Message.getRepeatedWrapperField(this, AdditionalNodeProperty, 3) as AdditionalNodeProperty[];
        }
        set node_property(value: AdditionalNodeProperty[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get edge_property() {
            return pb_1.Message.getRepeatedWrapperField(this, AdditionalEdgeProperty, 4) as AdditionalEdgeProperty[];
        }
        set edge_property(value: AdditionalEdgeProperty[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            node?: ReturnType<typeof CpgStruct.Node.prototype.toObject>[];
            edge?: ReturnType<typeof CpgStruct.Edge.prototype.toObject>[];
            node_property?: ReturnType<typeof AdditionalNodeProperty.prototype.toObject>[];
            edge_property?: ReturnType<typeof AdditionalEdgeProperty.prototype.toObject>[];
        }): CpgOverlay {
            const message = new CpgOverlay({});
            if (data.node != null) {
                message.node = data.node.map(item => CpgStruct.Node.fromObject(item));
            }
            if (data.edge != null) {
                message.edge = data.edge.map(item => CpgStruct.Edge.fromObject(item));
            }
            if (data.node_property != null) {
                message.node_property = data.node_property.map(item => AdditionalNodeProperty.fromObject(item));
            }
            if (data.edge_property != null) {
                message.edge_property = data.edge_property.map(item => AdditionalEdgeProperty.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                node?: ReturnType<typeof CpgStruct.Node.prototype.toObject>[];
                edge?: ReturnType<typeof CpgStruct.Edge.prototype.toObject>[];
                node_property?: ReturnType<typeof AdditionalNodeProperty.prototype.toObject>[];
                edge_property?: ReturnType<typeof AdditionalEdgeProperty.prototype.toObject>[];
            } = {};
            if (this.node != null) {
                data.node = this.node.map((item: CpgStruct.Node) => item.toObject());
            }
            if (this.edge != null) {
                data.edge = this.edge.map((item: CpgStruct.Edge) => item.toObject());
            }
            if (this.node_property != null) {
                data.node_property = this.node_property.map((item: AdditionalNodeProperty) => item.toObject());
            }
            if (this.edge_property != null) {
                data.edge_property = this.edge_property.map((item: AdditionalEdgeProperty) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.node.length)
                writer.writeRepeatedMessage(1, this.node, (item: CpgStruct.Node) => item.serialize(writer));
            if (this.edge.length)
                writer.writeRepeatedMessage(2, this.edge, (item: CpgStruct.Edge) => item.serialize(writer));
            if (this.node_property.length)
                writer.writeRepeatedMessage(3, this.node_property, (item: AdditionalNodeProperty) => item.serialize(writer));
            if (this.edge_property.length)
                writer.writeRepeatedMessage(4, this.edge_property, (item: AdditionalEdgeProperty) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CpgOverlay {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CpgOverlay();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.node, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CpgStruct.Node.deserialize(reader), CpgStruct.Node));
                        break;
                    case 2:
                        reader.readMessage(message.edge, () => pb_1.Message.addToRepeatedWrapperField(message, 2, CpgStruct.Edge.deserialize(reader), CpgStruct.Edge));
                        break;
                    case 3:
                        reader.readMessage(message.node_property, () => pb_1.Message.addToRepeatedWrapperField(message, 3, AdditionalNodeProperty.deserialize(reader), AdditionalNodeProperty));
                        break;
                    case 4:
                        reader.readMessage(message.edge_property, () => pb_1.Message.addToRepeatedWrapperField(message, 4, AdditionalEdgeProperty.deserialize(reader), AdditionalEdgeProperty));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CpgOverlay {
            return CpgOverlay.deserialize(bytes);
        }
    }
    export class DiffGraph extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            entries?: DiffGraph.Entry[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("entries" in data && data.entries != undefined) {
                    this.entries = data.entries;
                }
            }
        }
        get entries() {
            return pb_1.Message.getRepeatedWrapperField(this, DiffGraph.Entry, 1) as DiffGraph.Entry[];
        }
        set entries(value: DiffGraph.Entry[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            entries?: ReturnType<typeof DiffGraph.Entry.prototype.toObject>[];
        }): DiffGraph {
            const message = new DiffGraph({});
            if (data.entries != null) {
                message.entries = data.entries.map(item => DiffGraph.Entry.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                entries?: ReturnType<typeof DiffGraph.Entry.prototype.toObject>[];
            } = {};
            if (this.entries != null) {
                data.entries = this.entries.map((item: DiffGraph.Entry) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.entries.length)
                writer.writeRepeatedMessage(1, this.entries, (item: DiffGraph.Entry) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DiffGraph {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DiffGraph();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.entries, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DiffGraph.Entry.deserialize(reader), DiffGraph.Entry));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DiffGraph {
            return DiffGraph.deserialize(bytes);
        }
    }
    export namespace DiffGraph {
        export class RemoveNode extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                key?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("key" in data && data.key != undefined) {
                        this.key = data.key;
                    }
                }
            }
            get key() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set key(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                key?: number;
            }): RemoveNode {
                const message = new RemoveNode({});
                if (data.key != null) {
                    message.key = data.key;
                }
                return message;
            }
            toObject() {
                const data: {
                    key?: number;
                } = {};
                if (this.key != null) {
                    data.key = this.key;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.key != 0)
                    writer.writeInt64(1, this.key);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveNode {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveNode();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.key = reader.readInt64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RemoveNode {
                return RemoveNode.deserialize(bytes);
            }
        }
        export class RemoveNodeProperty extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                key?: number;
                name?: NodePropertyName;
                local_name?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("key" in data && data.key != undefined) {
                        this.key = data.key;
                    }
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("local_name" in data && data.local_name != undefined) {
                        this.local_name = data.local_name;
                    }
                }
            }
            get key() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set key(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 2, NodePropertyName.UNKNOWN_NODE_PROPERTY) as NodePropertyName;
            }
            set name(value: NodePropertyName) {
                pb_1.Message.setField(this, 2, value);
            }
            get local_name() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set local_name(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                key?: number;
                name?: NodePropertyName;
                local_name?: string;
            }): RemoveNodeProperty {
                const message = new RemoveNodeProperty({});
                if (data.key != null) {
                    message.key = data.key;
                }
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.local_name != null) {
                    message.local_name = data.local_name;
                }
                return message;
            }
            toObject() {
                const data: {
                    key?: number;
                    name?: NodePropertyName;
                    local_name?: string;
                } = {};
                if (this.key != null) {
                    data.key = this.key;
                }
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.local_name != null) {
                    data.local_name = this.local_name;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.key != 0)
                    writer.writeInt64(1, this.key);
                if (this.name != NodePropertyName.UNKNOWN_NODE_PROPERTY)
                    writer.writeEnum(2, this.name);
                if (this.local_name.length)
                    writer.writeString(3, this.local_name);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveNodeProperty {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveNodeProperty();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.key = reader.readInt64();
                            break;
                        case 2:
                            message.name = reader.readEnum();
                            break;
                        case 3:
                            message.local_name = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RemoveNodeProperty {
                return RemoveNodeProperty.deserialize(bytes);
            }
        }
        export class RemoveEdge extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                out_node_key?: number;
                in_node_key?: number;
                edge_type?: CpgStruct.Edge.EdgeType;
                propertiesHash?: Uint8Array;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("out_node_key" in data && data.out_node_key != undefined) {
                        this.out_node_key = data.out_node_key;
                    }
                    if ("in_node_key" in data && data.in_node_key != undefined) {
                        this.in_node_key = data.in_node_key;
                    }
                    if ("edge_type" in data && data.edge_type != undefined) {
                        this.edge_type = data.edge_type;
                    }
                    if ("propertiesHash" in data && data.propertiesHash != undefined) {
                        this.propertiesHash = data.propertiesHash;
                    }
                }
            }
            get out_node_key() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set out_node_key(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get in_node_key() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set in_node_key(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get edge_type() {
                return pb_1.Message.getFieldWithDefault(this, 3, CpgStruct.Edge.EdgeType.UNKNOWN_EDGE_TYPE) as CpgStruct.Edge.EdgeType;
            }
            set edge_type(value: CpgStruct.Edge.EdgeType) {
                pb_1.Message.setField(this, 3, value);
            }
            get propertiesHash() {
                return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
            }
            set propertiesHash(value: Uint8Array) {
                pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data: {
                out_node_key?: number;
                in_node_key?: number;
                edge_type?: CpgStruct.Edge.EdgeType;
                propertiesHash?: Uint8Array;
            }): RemoveEdge {
                const message = new RemoveEdge({});
                if (data.out_node_key != null) {
                    message.out_node_key = data.out_node_key;
                }
                if (data.in_node_key != null) {
                    message.in_node_key = data.in_node_key;
                }
                if (data.edge_type != null) {
                    message.edge_type = data.edge_type;
                }
                if (data.propertiesHash != null) {
                    message.propertiesHash = data.propertiesHash;
                }
                return message;
            }
            toObject() {
                const data: {
                    out_node_key?: number;
                    in_node_key?: number;
                    edge_type?: CpgStruct.Edge.EdgeType;
                    propertiesHash?: Uint8Array;
                } = {};
                if (this.out_node_key != null) {
                    data.out_node_key = this.out_node_key;
                }
                if (this.in_node_key != null) {
                    data.in_node_key = this.in_node_key;
                }
                if (this.edge_type != null) {
                    data.edge_type = this.edge_type;
                }
                if (this.propertiesHash != null) {
                    data.propertiesHash = this.propertiesHash;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.out_node_key != 0)
                    writer.writeInt64(1, this.out_node_key);
                if (this.in_node_key != 0)
                    writer.writeInt64(2, this.in_node_key);
                if (this.edge_type != CpgStruct.Edge.EdgeType.UNKNOWN_EDGE_TYPE)
                    writer.writeEnum(3, this.edge_type);
                if (this.propertiesHash.length)
                    writer.writeBytes(4, this.propertiesHash);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveEdge {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveEdge();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.out_node_key = reader.readInt64();
                            break;
                        case 2:
                            message.in_node_key = reader.readInt64();
                            break;
                        case 3:
                            message.edge_type = reader.readEnum();
                            break;
                        case 4:
                            message.propertiesHash = reader.readBytes();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RemoveEdge {
                return RemoveEdge.deserialize(bytes);
            }
        }
        export class RemoveEdgeProperty extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                out_node_key?: number;
                in_node_key?: number;
                edge_type?: CpgStruct.Edge.EdgeType;
                propertiesHash?: Uint8Array;
                property_name?: EdgePropertyName;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("out_node_key" in data && data.out_node_key != undefined) {
                        this.out_node_key = data.out_node_key;
                    }
                    if ("in_node_key" in data && data.in_node_key != undefined) {
                        this.in_node_key = data.in_node_key;
                    }
                    if ("edge_type" in data && data.edge_type != undefined) {
                        this.edge_type = data.edge_type;
                    }
                    if ("propertiesHash" in data && data.propertiesHash != undefined) {
                        this.propertiesHash = data.propertiesHash;
                    }
                    if ("property_name" in data && data.property_name != undefined) {
                        this.property_name = data.property_name;
                    }
                }
            }
            get out_node_key() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set out_node_key(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get in_node_key() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set in_node_key(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get edge_type() {
                return pb_1.Message.getFieldWithDefault(this, 3, CpgStruct.Edge.EdgeType.UNKNOWN_EDGE_TYPE) as CpgStruct.Edge.EdgeType;
            }
            set edge_type(value: CpgStruct.Edge.EdgeType) {
                pb_1.Message.setField(this, 3, value);
            }
            get propertiesHash() {
                return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
            }
            set propertiesHash(value: Uint8Array) {
                pb_1.Message.setField(this, 4, value);
            }
            get property_name() {
                return pb_1.Message.getFieldWithDefault(this, 5, EdgePropertyName.UNKNOWN_EDGE_PROPERTY) as EdgePropertyName;
            }
            set property_name(value: EdgePropertyName) {
                pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data: {
                out_node_key?: number;
                in_node_key?: number;
                edge_type?: CpgStruct.Edge.EdgeType;
                propertiesHash?: Uint8Array;
                property_name?: EdgePropertyName;
            }): RemoveEdgeProperty {
                const message = new RemoveEdgeProperty({});
                if (data.out_node_key != null) {
                    message.out_node_key = data.out_node_key;
                }
                if (data.in_node_key != null) {
                    message.in_node_key = data.in_node_key;
                }
                if (data.edge_type != null) {
                    message.edge_type = data.edge_type;
                }
                if (data.propertiesHash != null) {
                    message.propertiesHash = data.propertiesHash;
                }
                if (data.property_name != null) {
                    message.property_name = data.property_name;
                }
                return message;
            }
            toObject() {
                const data: {
                    out_node_key?: number;
                    in_node_key?: number;
                    edge_type?: CpgStruct.Edge.EdgeType;
                    propertiesHash?: Uint8Array;
                    property_name?: EdgePropertyName;
                } = {};
                if (this.out_node_key != null) {
                    data.out_node_key = this.out_node_key;
                }
                if (this.in_node_key != null) {
                    data.in_node_key = this.in_node_key;
                }
                if (this.edge_type != null) {
                    data.edge_type = this.edge_type;
                }
                if (this.propertiesHash != null) {
                    data.propertiesHash = this.propertiesHash;
                }
                if (this.property_name != null) {
                    data.property_name = this.property_name;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.out_node_key != 0)
                    writer.writeInt64(1, this.out_node_key);
                if (this.in_node_key != 0)
                    writer.writeInt64(2, this.in_node_key);
                if (this.edge_type != CpgStruct.Edge.EdgeType.UNKNOWN_EDGE_TYPE)
                    writer.writeEnum(3, this.edge_type);
                if (this.propertiesHash.length)
                    writer.writeBytes(4, this.propertiesHash);
                if (this.property_name != EdgePropertyName.UNKNOWN_EDGE_PROPERTY)
                    writer.writeEnum(5, this.property_name);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RemoveEdgeProperty {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RemoveEdgeProperty();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.out_node_key = reader.readInt64();
                            break;
                        case 2:
                            message.in_node_key = reader.readInt64();
                            break;
                        case 3:
                            message.edge_type = reader.readEnum();
                            break;
                        case 4:
                            message.propertiesHash = reader.readBytes();
                            break;
                        case 5:
                            message.property_name = reader.readEnum();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RemoveEdgeProperty {
                return RemoveEdgeProperty.deserialize(bytes);
            }
        }
        export class Entry extends pb_1.Message {
            #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8]];
            constructor(data?: any[] | ({} & (({
                node?: CpgStruct.Node;
                edge?: never;
                node_property?: never;
                edge_property?: never;
                remove_node?: never;
                remove_node_property?: never;
                remove_edge?: never;
                remove_edge_property?: never;
            } | {
                node?: never;
                edge?: CpgStruct.Edge;
                node_property?: never;
                edge_property?: never;
                remove_node?: never;
                remove_node_property?: never;
                remove_edge?: never;
                remove_edge_property?: never;
            } | {
                node?: never;
                edge?: never;
                node_property?: AdditionalNodeProperty;
                edge_property?: never;
                remove_node?: never;
                remove_node_property?: never;
                remove_edge?: never;
                remove_edge_property?: never;
            } | {
                node?: never;
                edge?: never;
                node_property?: never;
                edge_property?: AdditionalEdgeProperty;
                remove_node?: never;
                remove_node_property?: never;
                remove_edge?: never;
                remove_edge_property?: never;
            } | {
                node?: never;
                edge?: never;
                node_property?: never;
                edge_property?: never;
                remove_node?: DiffGraph.RemoveNode;
                remove_node_property?: never;
                remove_edge?: never;
                remove_edge_property?: never;
            } | {
                node?: never;
                edge?: never;
                node_property?: never;
                edge_property?: never;
                remove_node?: never;
                remove_node_property?: DiffGraph.RemoveNodeProperty;
                remove_edge?: never;
                remove_edge_property?: never;
            } | {
                node?: never;
                edge?: never;
                node_property?: never;
                edge_property?: never;
                remove_node?: never;
                remove_node_property?: never;
                remove_edge?: DiffGraph.RemoveEdge;
                remove_edge_property?: never;
            } | {
                node?: never;
                edge?: never;
                node_property?: never;
                edge_property?: never;
                remove_node?: never;
                remove_node_property?: never;
                remove_edge?: never;
                remove_edge_property?: DiffGraph.RemoveEdgeProperty;
            })))) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("node" in data && data.node != undefined) {
                        this.node = data.node;
                    }
                    if ("edge" in data && data.edge != undefined) {
                        this.edge = data.edge;
                    }
                    if ("node_property" in data && data.node_property != undefined) {
                        this.node_property = data.node_property;
                    }
                    if ("edge_property" in data && data.edge_property != undefined) {
                        this.edge_property = data.edge_property;
                    }
                    if ("remove_node" in data && data.remove_node != undefined) {
                        this.remove_node = data.remove_node;
                    }
                    if ("remove_node_property" in data && data.remove_node_property != undefined) {
                        this.remove_node_property = data.remove_node_property;
                    }
                    if ("remove_edge" in data && data.remove_edge != undefined) {
                        this.remove_edge = data.remove_edge;
                    }
                    if ("remove_edge_property" in data && data.remove_edge_property != undefined) {
                        this.remove_edge_property = data.remove_edge_property;
                    }
                }
            }
            get node() {
                return pb_1.Message.getWrapperField(this, CpgStruct.Node, 1) as CpgStruct.Node;
            }
            set node(value: CpgStruct.Node) {
                pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
            }
            get has_node() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get edge() {
                return pb_1.Message.getWrapperField(this, CpgStruct.Edge, 2) as CpgStruct.Edge;
            }
            set edge(value: CpgStruct.Edge) {
                pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
            }
            get has_edge() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get node_property() {
                return pb_1.Message.getWrapperField(this, AdditionalNodeProperty, 3) as AdditionalNodeProperty;
            }
            set node_property(value: AdditionalNodeProperty) {
                pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
            }
            get has_node_property() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get edge_property() {
                return pb_1.Message.getWrapperField(this, AdditionalEdgeProperty, 4) as AdditionalEdgeProperty;
            }
            set edge_property(value: AdditionalEdgeProperty) {
                pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
            }
            get has_edge_property() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get remove_node() {
                return pb_1.Message.getWrapperField(this, DiffGraph.RemoveNode, 5) as DiffGraph.RemoveNode;
            }
            set remove_node(value: DiffGraph.RemoveNode) {
                pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
            }
            get has_remove_node() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get remove_node_property() {
                return pb_1.Message.getWrapperField(this, DiffGraph.RemoveNodeProperty, 6) as DiffGraph.RemoveNodeProperty;
            }
            set remove_node_property(value: DiffGraph.RemoveNodeProperty) {
                pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
            }
            get has_remove_node_property() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get remove_edge() {
                return pb_1.Message.getWrapperField(this, DiffGraph.RemoveEdge, 7) as DiffGraph.RemoveEdge;
            }
            set remove_edge(value: DiffGraph.RemoveEdge) {
                pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
            }
            get has_remove_edge() {
                return pb_1.Message.getField(this, 7) != null;
            }
            get remove_edge_property() {
                return pb_1.Message.getWrapperField(this, DiffGraph.RemoveEdgeProperty, 8) as DiffGraph.RemoveEdgeProperty;
            }
            set remove_edge_property(value: DiffGraph.RemoveEdgeProperty) {
                pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
            }
            get has_remove_edge_property() {
                return pb_1.Message.getField(this, 8) != null;
            }
            get value() {
                const cases: {
                    [index: number]: "none" | "node" | "edge" | "node_property" | "edge_property" | "remove_node" | "remove_node_property" | "remove_edge" | "remove_edge_property";
                } = {
                    0: "none",
                    1: "node",
                    2: "edge",
                    3: "node_property",
                    4: "edge_property",
                    5: "remove_node",
                    6: "remove_node_property",
                    7: "remove_edge",
                    8: "remove_edge_property"
                };
                return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8])];
            }
            static fromObject(data: {
                node?: ReturnType<typeof CpgStruct.Node.prototype.toObject>;
                edge?: ReturnType<typeof CpgStruct.Edge.prototype.toObject>;
                node_property?: ReturnType<typeof AdditionalNodeProperty.prototype.toObject>;
                edge_property?: ReturnType<typeof AdditionalEdgeProperty.prototype.toObject>;
                remove_node?: ReturnType<typeof DiffGraph.RemoveNode.prototype.toObject>;
                remove_node_property?: ReturnType<typeof DiffGraph.RemoveNodeProperty.prototype.toObject>;
                remove_edge?: ReturnType<typeof DiffGraph.RemoveEdge.prototype.toObject>;
                remove_edge_property?: ReturnType<typeof DiffGraph.RemoveEdgeProperty.prototype.toObject>;
            }): Entry {
                const message = new Entry({});
                if (data.node != null) {
                    message.node = CpgStruct.Node.fromObject(data.node);
                }
                if (data.edge != null) {
                    message.edge = CpgStruct.Edge.fromObject(data.edge);
                }
                if (data.node_property != null) {
                    message.node_property = AdditionalNodeProperty.fromObject(data.node_property);
                }
                if (data.edge_property != null) {
                    message.edge_property = AdditionalEdgeProperty.fromObject(data.edge_property);
                }
                if (data.remove_node != null) {
                    message.remove_node = DiffGraph.RemoveNode.fromObject(data.remove_node);
                }
                if (data.remove_node_property != null) {
                    message.remove_node_property = DiffGraph.RemoveNodeProperty.fromObject(data.remove_node_property);
                }
                if (data.remove_edge != null) {
                    message.remove_edge = DiffGraph.RemoveEdge.fromObject(data.remove_edge);
                }
                if (data.remove_edge_property != null) {
                    message.remove_edge_property = DiffGraph.RemoveEdgeProperty.fromObject(data.remove_edge_property);
                }
                return message;
            }
            toObject() {
                const data: {
                    node?: ReturnType<typeof CpgStruct.Node.prototype.toObject>;
                    edge?: ReturnType<typeof CpgStruct.Edge.prototype.toObject>;
                    node_property?: ReturnType<typeof AdditionalNodeProperty.prototype.toObject>;
                    edge_property?: ReturnType<typeof AdditionalEdgeProperty.prototype.toObject>;
                    remove_node?: ReturnType<typeof DiffGraph.RemoveNode.prototype.toObject>;
                    remove_node_property?: ReturnType<typeof DiffGraph.RemoveNodeProperty.prototype.toObject>;
                    remove_edge?: ReturnType<typeof DiffGraph.RemoveEdge.prototype.toObject>;
                    remove_edge_property?: ReturnType<typeof DiffGraph.RemoveEdgeProperty.prototype.toObject>;
                } = {};
                if (this.node != null) {
                    data.node = this.node.toObject();
                }
                if (this.edge != null) {
                    data.edge = this.edge.toObject();
                }
                if (this.node_property != null) {
                    data.node_property = this.node_property.toObject();
                }
                if (this.edge_property != null) {
                    data.edge_property = this.edge_property.toObject();
                }
                if (this.remove_node != null) {
                    data.remove_node = this.remove_node.toObject();
                }
                if (this.remove_node_property != null) {
                    data.remove_node_property = this.remove_node_property.toObject();
                }
                if (this.remove_edge != null) {
                    data.remove_edge = this.remove_edge.toObject();
                }
                if (this.remove_edge_property != null) {
                    data.remove_edge_property = this.remove_edge_property.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_node)
                    writer.writeMessage(1, this.node, () => this.node.serialize(writer));
                if (this.has_edge)
                    writer.writeMessage(2, this.edge, () => this.edge.serialize(writer));
                if (this.has_node_property)
                    writer.writeMessage(3, this.node_property, () => this.node_property.serialize(writer));
                if (this.has_edge_property)
                    writer.writeMessage(4, this.edge_property, () => this.edge_property.serialize(writer));
                if (this.has_remove_node)
                    writer.writeMessage(5, this.remove_node, () => this.remove_node.serialize(writer));
                if (this.has_remove_node_property)
                    writer.writeMessage(6, this.remove_node_property, () => this.remove_node_property.serialize(writer));
                if (this.has_remove_edge)
                    writer.writeMessage(7, this.remove_edge, () => this.remove_edge.serialize(writer));
                if (this.has_remove_edge_property)
                    writer.writeMessage(8, this.remove_edge_property, () => this.remove_edge_property.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Entry {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Entry();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.node, () => message.node = CpgStruct.Node.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.edge, () => message.edge = CpgStruct.Edge.deserialize(reader));
                            break;
                        case 3:
                            reader.readMessage(message.node_property, () => message.node_property = AdditionalNodeProperty.deserialize(reader));
                            break;
                        case 4:
                            reader.readMessage(message.edge_property, () => message.edge_property = AdditionalEdgeProperty.deserialize(reader));
                            break;
                        case 5:
                            reader.readMessage(message.remove_node, () => message.remove_node = DiffGraph.RemoveNode.deserialize(reader));
                            break;
                        case 6:
                            reader.readMessage(message.remove_node_property, () => message.remove_node_property = DiffGraph.RemoveNodeProperty.deserialize(reader));
                            break;
                        case 7:
                            reader.readMessage(message.remove_edge, () => message.remove_edge = DiffGraph.RemoveEdge.deserialize(reader));
                            break;
                        case 8:
                            reader.readMessage(message.remove_edge_property, () => message.remove_edge_property = DiffGraph.RemoveEdgeProperty.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Entry {
                return Entry.deserialize(bytes);
            }
        }
    }
    export class UsageSlice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            objectSlices?: UsageSlice.MethodUsageSlice[];
            userDefinedTypes?: UsageSlice.UserDefinedTypes[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("objectSlices" in data && data.objectSlices != undefined) {
                    this.objectSlices = data.objectSlices;
                }
                if ("userDefinedTypes" in data && data.userDefinedTypes != undefined) {
                    this.userDefinedTypes = data.userDefinedTypes;
                }
            }
        }
        get objectSlices() {
            return pb_1.Message.getRepeatedWrapperField(this, UsageSlice.MethodUsageSlice, 1) as UsageSlice.MethodUsageSlice[];
        }
        set objectSlices(value: UsageSlice.MethodUsageSlice[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get userDefinedTypes() {
            return pb_1.Message.getRepeatedWrapperField(this, UsageSlice.UserDefinedTypes, 2) as UsageSlice.UserDefinedTypes[];
        }
        set userDefinedTypes(value: UsageSlice.UserDefinedTypes[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            objectSlices?: ReturnType<typeof UsageSlice.MethodUsageSlice.prototype.toObject>[];
            userDefinedTypes?: ReturnType<typeof UsageSlice.UserDefinedTypes.prototype.toObject>[];
        }): UsageSlice {
            const message = new UsageSlice({});
            if (data.objectSlices != null) {
                message.objectSlices = data.objectSlices.map(item => UsageSlice.MethodUsageSlice.fromObject(item));
            }
            if (data.userDefinedTypes != null) {
                message.userDefinedTypes = data.userDefinedTypes.map(item => UsageSlice.UserDefinedTypes.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                objectSlices?: ReturnType<typeof UsageSlice.MethodUsageSlice.prototype.toObject>[];
                userDefinedTypes?: ReturnType<typeof UsageSlice.UserDefinedTypes.prototype.toObject>[];
            } = {};
            if (this.objectSlices != null) {
                data.objectSlices = this.objectSlices.map((item: UsageSlice.MethodUsageSlice) => item.toObject());
            }
            if (this.userDefinedTypes != null) {
                data.userDefinedTypes = this.userDefinedTypes.map((item: UsageSlice.UserDefinedTypes) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.objectSlices.length)
                writer.writeRepeatedMessage(1, this.objectSlices, (item: UsageSlice.MethodUsageSlice) => item.serialize(writer));
            if (this.userDefinedTypes.length)
                writer.writeRepeatedMessage(2, this.userDefinedTypes, (item: UsageSlice.UserDefinedTypes) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UsageSlice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UsageSlice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.objectSlices, () => pb_1.Message.addToRepeatedWrapperField(message, 1, UsageSlice.MethodUsageSlice.deserialize(reader), UsageSlice.MethodUsageSlice));
                        break;
                    case 2:
                        reader.readMessage(message.userDefinedTypes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, UsageSlice.UserDefinedTypes.deserialize(reader), UsageSlice.UserDefinedTypes));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UsageSlice {
            return UsageSlice.deserialize(bytes);
        }
    }
    export namespace UsageSlice {
        export enum LabelType {
            ANY = 0,
            LOCAL = 1,
            LITERAL = 2,
            PARAM = 3,
            CALL = 4,
            IDENTIFIER = 5,
            TYPE_REF = 6,
            UNKNOWN = 10
        }
        export class TargetObj extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                name?: string;
                typeFullName?: string;
                position?: number;
                isExternal?: boolean;
                lineNumber?: number;
                columnNumber?: number;
                label?: UsageSlice.LabelType;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("typeFullName" in data && data.typeFullName != undefined) {
                        this.typeFullName = data.typeFullName;
                    }
                    if ("position" in data && data.position != undefined) {
                        this.position = data.position;
                    }
                    if ("isExternal" in data && data.isExternal != undefined) {
                        this.isExternal = data.isExternal;
                    }
                    if ("lineNumber" in data && data.lineNumber != undefined) {
                        this.lineNumber = data.lineNumber;
                    }
                    if ("columnNumber" in data && data.columnNumber != undefined) {
                        this.columnNumber = data.columnNumber;
                    }
                    if ("label" in data && data.label != undefined) {
                        this.label = data.label;
                    }
                }
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get typeFullName() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set typeFullName(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get position() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set position(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get isExternal() {
                return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
            }
            set isExternal(value: boolean) {
                pb_1.Message.setField(this, 4, value);
            }
            get lineNumber() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set lineNumber(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get columnNumber() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set columnNumber(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get label() {
                return pb_1.Message.getFieldWithDefault(this, 7, UsageSlice.LabelType.ANY) as UsageSlice.LabelType;
            }
            set label(value: UsageSlice.LabelType) {
                pb_1.Message.setField(this, 7, value);
            }
            static fromObject(data: {
                name?: string;
                typeFullName?: string;
                position?: number;
                isExternal?: boolean;
                lineNumber?: number;
                columnNumber?: number;
                label?: UsageSlice.LabelType;
            }): TargetObj {
                const message = new TargetObj({});
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.typeFullName != null) {
                    message.typeFullName = data.typeFullName;
                }
                if (data.position != null) {
                    message.position = data.position;
                }
                if (data.isExternal != null) {
                    message.isExternal = data.isExternal;
                }
                if (data.lineNumber != null) {
                    message.lineNumber = data.lineNumber;
                }
                if (data.columnNumber != null) {
                    message.columnNumber = data.columnNumber;
                }
                if (data.label != null) {
                    message.label = data.label;
                }
                return message;
            }
            toObject() {
                const data: {
                    name?: string;
                    typeFullName?: string;
                    position?: number;
                    isExternal?: boolean;
                    lineNumber?: number;
                    columnNumber?: number;
                    label?: UsageSlice.LabelType;
                } = {};
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.typeFullName != null) {
                    data.typeFullName = this.typeFullName;
                }
                if (this.position != null) {
                    data.position = this.position;
                }
                if (this.isExternal != null) {
                    data.isExternal = this.isExternal;
                }
                if (this.lineNumber != null) {
                    data.lineNumber = this.lineNumber;
                }
                if (this.columnNumber != null) {
                    data.columnNumber = this.columnNumber;
                }
                if (this.label != null) {
                    data.label = this.label;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.name.length)
                    writer.writeString(1, this.name);
                if (this.typeFullName.length)
                    writer.writeString(2, this.typeFullName);
                if (this.position != 0)
                    writer.writeUint32(3, this.position);
                if (this.isExternal != false)
                    writer.writeBool(4, this.isExternal);
                if (this.lineNumber != 0)
                    writer.writeUint32(5, this.lineNumber);
                if (this.columnNumber != 0)
                    writer.writeUint32(6, this.columnNumber);
                if (this.label != UsageSlice.LabelType.ANY)
                    writer.writeEnum(7, this.label);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TargetObj {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TargetObj();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.name = reader.readString();
                            break;
                        case 2:
                            message.typeFullName = reader.readString();
                            break;
                        case 3:
                            message.position = reader.readUint32();
                            break;
                        case 4:
                            message.isExternal = reader.readBool();
                            break;
                        case 5:
                            message.lineNumber = reader.readUint32();
                            break;
                        case 6:
                            message.columnNumber = reader.readUint32();
                            break;
                        case 7:
                            message.label = reader.readEnum();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): TargetObj {
                return TargetObj.deserialize(bytes);
            }
        }
        export class DefinedBy extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                name?: string;
                typeFullName?: string;
                resolvedMethod?: string;
                position?: number;
                isExternal?: boolean;
                lineNumber?: number;
                columnNumber?: number;
                label?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("typeFullName" in data && data.typeFullName != undefined) {
                        this.typeFullName = data.typeFullName;
                    }
                    if ("resolvedMethod" in data && data.resolvedMethod != undefined) {
                        this.resolvedMethod = data.resolvedMethod;
                    }
                    if ("position" in data && data.position != undefined) {
                        this.position = data.position;
                    }
                    if ("isExternal" in data && data.isExternal != undefined) {
                        this.isExternal = data.isExternal;
                    }
                    if ("lineNumber" in data && data.lineNumber != undefined) {
                        this.lineNumber = data.lineNumber;
                    }
                    if ("columnNumber" in data && data.columnNumber != undefined) {
                        this.columnNumber = data.columnNumber;
                    }
                    if ("label" in data && data.label != undefined) {
                        this.label = data.label;
                    }
                }
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get typeFullName() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set typeFullName(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get resolvedMethod() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set resolvedMethod(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get position() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set position(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get isExternal() {
                return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
            }
            set isExternal(value: boolean) {
                pb_1.Message.setField(this, 5, value);
            }
            get lineNumber() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set lineNumber(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get columnNumber() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set columnNumber(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            get label() {
                return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
            }
            set label(value: string) {
                pb_1.Message.setField(this, 8, value);
            }
            static fromObject(data: {
                name?: string;
                typeFullName?: string;
                resolvedMethod?: string;
                position?: number;
                isExternal?: boolean;
                lineNumber?: number;
                columnNumber?: number;
                label?: string;
            }): DefinedBy {
                const message = new DefinedBy({});
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.typeFullName != null) {
                    message.typeFullName = data.typeFullName;
                }
                if (data.resolvedMethod != null) {
                    message.resolvedMethod = data.resolvedMethod;
                }
                if (data.position != null) {
                    message.position = data.position;
                }
                if (data.isExternal != null) {
                    message.isExternal = data.isExternal;
                }
                if (data.lineNumber != null) {
                    message.lineNumber = data.lineNumber;
                }
                if (data.columnNumber != null) {
                    message.columnNumber = data.columnNumber;
                }
                if (data.label != null) {
                    message.label = data.label;
                }
                return message;
            }
            toObject() {
                const data: {
                    name?: string;
                    typeFullName?: string;
                    resolvedMethod?: string;
                    position?: number;
                    isExternal?: boolean;
                    lineNumber?: number;
                    columnNumber?: number;
                    label?: string;
                } = {};
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.typeFullName != null) {
                    data.typeFullName = this.typeFullName;
                }
                if (this.resolvedMethod != null) {
                    data.resolvedMethod = this.resolvedMethod;
                }
                if (this.position != null) {
                    data.position = this.position;
                }
                if (this.isExternal != null) {
                    data.isExternal = this.isExternal;
                }
                if (this.lineNumber != null) {
                    data.lineNumber = this.lineNumber;
                }
                if (this.columnNumber != null) {
                    data.columnNumber = this.columnNumber;
                }
                if (this.label != null) {
                    data.label = this.label;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.name.length)
                    writer.writeString(1, this.name);
                if (this.typeFullName.length)
                    writer.writeString(2, this.typeFullName);
                if (this.resolvedMethod.length)
                    writer.writeString(3, this.resolvedMethod);
                if (this.position != 0)
                    writer.writeUint32(4, this.position);
                if (this.isExternal != false)
                    writer.writeBool(5, this.isExternal);
                if (this.lineNumber != 0)
                    writer.writeUint32(6, this.lineNumber);
                if (this.columnNumber != 0)
                    writer.writeUint32(7, this.columnNumber);
                if (this.label.length)
                    writer.writeString(8, this.label);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DefinedBy {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DefinedBy();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.name = reader.readString();
                            break;
                        case 2:
                            message.typeFullName = reader.readString();
                            break;
                        case 3:
                            message.resolvedMethod = reader.readString();
                            break;
                        case 4:
                            message.position = reader.readUint32();
                            break;
                        case 5:
                            message.isExternal = reader.readBool();
                            break;
                        case 6:
                            message.lineNumber = reader.readUint32();
                            break;
                        case 7:
                            message.columnNumber = reader.readUint32();
                            break;
                        case 8:
                            message.label = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): DefinedBy {
                return DefinedBy.deserialize(bytes);
            }
        }
        export class InvokedCalls extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                callName?: string;
                resolvedMethod?: string;
                paramTypes?: string[];
                returnType?: string;
                isExternal?: boolean;
                lineNumber?: number;
                columnNumber?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("callName" in data && data.callName != undefined) {
                        this.callName = data.callName;
                    }
                    if ("resolvedMethod" in data && data.resolvedMethod != undefined) {
                        this.resolvedMethod = data.resolvedMethod;
                    }
                    if ("paramTypes" in data && data.paramTypes != undefined) {
                        this.paramTypes = data.paramTypes;
                    }
                    if ("returnType" in data && data.returnType != undefined) {
                        this.returnType = data.returnType;
                    }
                    if ("isExternal" in data && data.isExternal != undefined) {
                        this.isExternal = data.isExternal;
                    }
                    if ("lineNumber" in data && data.lineNumber != undefined) {
                        this.lineNumber = data.lineNumber;
                    }
                    if ("columnNumber" in data && data.columnNumber != undefined) {
                        this.columnNumber = data.columnNumber;
                    }
                }
            }
            get callName() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set callName(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get resolvedMethod() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set resolvedMethod(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get paramTypes() {
                return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
            }
            set paramTypes(value: string[]) {
                pb_1.Message.setField(this, 3, value);
            }
            get returnType() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set returnType(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get isExternal() {
                return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
            }
            set isExternal(value: boolean) {
                pb_1.Message.setField(this, 5, value);
            }
            get lineNumber() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set lineNumber(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get columnNumber() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set columnNumber(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            static fromObject(data: {
                callName?: string;
                resolvedMethod?: string;
                paramTypes?: string[];
                returnType?: string;
                isExternal?: boolean;
                lineNumber?: number;
                columnNumber?: number;
            }): InvokedCalls {
                const message = new InvokedCalls({});
                if (data.callName != null) {
                    message.callName = data.callName;
                }
                if (data.resolvedMethod != null) {
                    message.resolvedMethod = data.resolvedMethod;
                }
                if (data.paramTypes != null) {
                    message.paramTypes = data.paramTypes;
                }
                if (data.returnType != null) {
                    message.returnType = data.returnType;
                }
                if (data.isExternal != null) {
                    message.isExternal = data.isExternal;
                }
                if (data.lineNumber != null) {
                    message.lineNumber = data.lineNumber;
                }
                if (data.columnNumber != null) {
                    message.columnNumber = data.columnNumber;
                }
                return message;
            }
            toObject() {
                const data: {
                    callName?: string;
                    resolvedMethod?: string;
                    paramTypes?: string[];
                    returnType?: string;
                    isExternal?: boolean;
                    lineNumber?: number;
                    columnNumber?: number;
                } = {};
                if (this.callName != null) {
                    data.callName = this.callName;
                }
                if (this.resolvedMethod != null) {
                    data.resolvedMethod = this.resolvedMethod;
                }
                if (this.paramTypes != null) {
                    data.paramTypes = this.paramTypes;
                }
                if (this.returnType != null) {
                    data.returnType = this.returnType;
                }
                if (this.isExternal != null) {
                    data.isExternal = this.isExternal;
                }
                if (this.lineNumber != null) {
                    data.lineNumber = this.lineNumber;
                }
                if (this.columnNumber != null) {
                    data.columnNumber = this.columnNumber;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.callName.length)
                    writer.writeString(1, this.callName);
                if (this.resolvedMethod.length)
                    writer.writeString(2, this.resolvedMethod);
                if (this.paramTypes.length)
                    writer.writeRepeatedString(3, this.paramTypes);
                if (this.returnType.length)
                    writer.writeString(4, this.returnType);
                if (this.isExternal != false)
                    writer.writeBool(5, this.isExternal);
                if (this.lineNumber != 0)
                    writer.writeUint32(6, this.lineNumber);
                if (this.columnNumber != 0)
                    writer.writeUint32(7, this.columnNumber);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvokedCalls {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvokedCalls();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.callName = reader.readString();
                            break;
                        case 2:
                            message.resolvedMethod = reader.readString();
                            break;
                        case 3:
                            pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                            break;
                        case 4:
                            message.returnType = reader.readString();
                            break;
                        case 5:
                            message.isExternal = reader.readBool();
                            break;
                        case 6:
                            message.lineNumber = reader.readUint32();
                            break;
                        case 7:
                            message.columnNumber = reader.readUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): InvokedCalls {
                return InvokedCalls.deserialize(bytes);
            }
        }
        export class ArgToCalls extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                callName?: string;
                resolvedMethod?: string;
                paramTypes?: string[];
                returnType?: string;
                position?: number;
                isExternal?: boolean;
                lineNumber?: number;
                columnNumber?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("callName" in data && data.callName != undefined) {
                        this.callName = data.callName;
                    }
                    if ("resolvedMethod" in data && data.resolvedMethod != undefined) {
                        this.resolvedMethod = data.resolvedMethod;
                    }
                    if ("paramTypes" in data && data.paramTypes != undefined) {
                        this.paramTypes = data.paramTypes;
                    }
                    if ("returnType" in data && data.returnType != undefined) {
                        this.returnType = data.returnType;
                    }
                    if ("position" in data && data.position != undefined) {
                        this.position = data.position;
                    }
                    if ("isExternal" in data && data.isExternal != undefined) {
                        this.isExternal = data.isExternal;
                    }
                    if ("lineNumber" in data && data.lineNumber != undefined) {
                        this.lineNumber = data.lineNumber;
                    }
                    if ("columnNumber" in data && data.columnNumber != undefined) {
                        this.columnNumber = data.columnNumber;
                    }
                }
            }
            get callName() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set callName(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get resolvedMethod() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set resolvedMethod(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get paramTypes() {
                return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
            }
            set paramTypes(value: string[]) {
                pb_1.Message.setField(this, 3, value);
            }
            get returnType() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set returnType(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get position() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set position(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get isExternal() {
                return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
            }
            set isExternal(value: boolean) {
                pb_1.Message.setField(this, 6, value);
            }
            get lineNumber() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set lineNumber(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            get columnNumber() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }
            set columnNumber(value: number) {
                pb_1.Message.setField(this, 8, value);
            }
            static fromObject(data: {
                callName?: string;
                resolvedMethod?: string;
                paramTypes?: string[];
                returnType?: string;
                position?: number;
                isExternal?: boolean;
                lineNumber?: number;
                columnNumber?: number;
            }): ArgToCalls {
                const message = new ArgToCalls({});
                if (data.callName != null) {
                    message.callName = data.callName;
                }
                if (data.resolvedMethod != null) {
                    message.resolvedMethod = data.resolvedMethod;
                }
                if (data.paramTypes != null) {
                    message.paramTypes = data.paramTypes;
                }
                if (data.returnType != null) {
                    message.returnType = data.returnType;
                }
                if (data.position != null) {
                    message.position = data.position;
                }
                if (data.isExternal != null) {
                    message.isExternal = data.isExternal;
                }
                if (data.lineNumber != null) {
                    message.lineNumber = data.lineNumber;
                }
                if (data.columnNumber != null) {
                    message.columnNumber = data.columnNumber;
                }
                return message;
            }
            toObject() {
                const data: {
                    callName?: string;
                    resolvedMethod?: string;
                    paramTypes?: string[];
                    returnType?: string;
                    position?: number;
                    isExternal?: boolean;
                    lineNumber?: number;
                    columnNumber?: number;
                } = {};
                if (this.callName != null) {
                    data.callName = this.callName;
                }
                if (this.resolvedMethod != null) {
                    data.resolvedMethod = this.resolvedMethod;
                }
                if (this.paramTypes != null) {
                    data.paramTypes = this.paramTypes;
                }
                if (this.returnType != null) {
                    data.returnType = this.returnType;
                }
                if (this.position != null) {
                    data.position = this.position;
                }
                if (this.isExternal != null) {
                    data.isExternal = this.isExternal;
                }
                if (this.lineNumber != null) {
                    data.lineNumber = this.lineNumber;
                }
                if (this.columnNumber != null) {
                    data.columnNumber = this.columnNumber;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.callName.length)
                    writer.writeString(1, this.callName);
                if (this.resolvedMethod.length)
                    writer.writeString(2, this.resolvedMethod);
                if (this.paramTypes.length)
                    writer.writeRepeatedString(3, this.paramTypes);
                if (this.returnType.length)
                    writer.writeString(4, this.returnType);
                if (this.position != 0)
                    writer.writeUint32(5, this.position);
                if (this.isExternal != false)
                    writer.writeBool(6, this.isExternal);
                if (this.lineNumber != 0)
                    writer.writeUint32(7, this.lineNumber);
                if (this.columnNumber != 0)
                    writer.writeUint32(8, this.columnNumber);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArgToCalls {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArgToCalls();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.callName = reader.readString();
                            break;
                        case 2:
                            message.resolvedMethod = reader.readString();
                            break;
                        case 3:
                            pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                            break;
                        case 4:
                            message.returnType = reader.readString();
                            break;
                        case 5:
                            message.position = reader.readUint32();
                            break;
                        case 6:
                            message.isExternal = reader.readBool();
                            break;
                        case 7:
                            message.lineNumber = reader.readUint32();
                            break;
                        case 8:
                            message.columnNumber = reader.readUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ArgToCalls {
                return ArgToCalls.deserialize(bytes);
            }
        }
        export class ObjectUsageSlice extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                targetObj?: UsageSlice.TargetObj;
                definedBy?: UsageSlice.DefinedBy;
                invokedCalls?: UsageSlice.InvokedCalls[];
                argToCalls?: UsageSlice.ArgToCalls[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("targetObj" in data && data.targetObj != undefined) {
                        this.targetObj = data.targetObj;
                    }
                    if ("definedBy" in data && data.definedBy != undefined) {
                        this.definedBy = data.definedBy;
                    }
                    if ("invokedCalls" in data && data.invokedCalls != undefined) {
                        this.invokedCalls = data.invokedCalls;
                    }
                    if ("argToCalls" in data && data.argToCalls != undefined) {
                        this.argToCalls = data.argToCalls;
                    }
                }
            }
            get targetObj() {
                return pb_1.Message.getWrapperField(this, UsageSlice.TargetObj, 1) as UsageSlice.TargetObj;
            }
            set targetObj(value: UsageSlice.TargetObj) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_targetObj() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get definedBy() {
                return pb_1.Message.getWrapperField(this, UsageSlice.DefinedBy, 2) as UsageSlice.DefinedBy;
            }
            set definedBy(value: UsageSlice.DefinedBy) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_definedBy() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get invokedCalls() {
                return pb_1.Message.getRepeatedWrapperField(this, UsageSlice.InvokedCalls, 3) as UsageSlice.InvokedCalls[];
            }
            set invokedCalls(value: UsageSlice.InvokedCalls[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            get argToCalls() {
                return pb_1.Message.getRepeatedWrapperField(this, UsageSlice.ArgToCalls, 4) as UsageSlice.ArgToCalls[];
            }
            set argToCalls(value: UsageSlice.ArgToCalls[]) {
                pb_1.Message.setRepeatedWrapperField(this, 4, value);
            }
            static fromObject(data: {
                targetObj?: ReturnType<typeof UsageSlice.TargetObj.prototype.toObject>;
                definedBy?: ReturnType<typeof UsageSlice.DefinedBy.prototype.toObject>;
                invokedCalls?: ReturnType<typeof UsageSlice.InvokedCalls.prototype.toObject>[];
                argToCalls?: ReturnType<typeof UsageSlice.ArgToCalls.prototype.toObject>[];
            }): ObjectUsageSlice {
                const message = new ObjectUsageSlice({});
                if (data.targetObj != null) {
                    message.targetObj = UsageSlice.TargetObj.fromObject(data.targetObj);
                }
                if (data.definedBy != null) {
                    message.definedBy = UsageSlice.DefinedBy.fromObject(data.definedBy);
                }
                if (data.invokedCalls != null) {
                    message.invokedCalls = data.invokedCalls.map(item => UsageSlice.InvokedCalls.fromObject(item));
                }
                if (data.argToCalls != null) {
                    message.argToCalls = data.argToCalls.map(item => UsageSlice.ArgToCalls.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    targetObj?: ReturnType<typeof UsageSlice.TargetObj.prototype.toObject>;
                    definedBy?: ReturnType<typeof UsageSlice.DefinedBy.prototype.toObject>;
                    invokedCalls?: ReturnType<typeof UsageSlice.InvokedCalls.prototype.toObject>[];
                    argToCalls?: ReturnType<typeof UsageSlice.ArgToCalls.prototype.toObject>[];
                } = {};
                if (this.targetObj != null) {
                    data.targetObj = this.targetObj.toObject();
                }
                if (this.definedBy != null) {
                    data.definedBy = this.definedBy.toObject();
                }
                if (this.invokedCalls != null) {
                    data.invokedCalls = this.invokedCalls.map((item: UsageSlice.InvokedCalls) => item.toObject());
                }
                if (this.argToCalls != null) {
                    data.argToCalls = this.argToCalls.map((item: UsageSlice.ArgToCalls) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_targetObj)
                    writer.writeMessage(1, this.targetObj, () => this.targetObj.serialize(writer));
                if (this.has_definedBy)
                    writer.writeMessage(2, this.definedBy, () => this.definedBy.serialize(writer));
                if (this.invokedCalls.length)
                    writer.writeRepeatedMessage(3, this.invokedCalls, (item: UsageSlice.InvokedCalls) => item.serialize(writer));
                if (this.argToCalls.length)
                    writer.writeRepeatedMessage(4, this.argToCalls, (item: UsageSlice.ArgToCalls) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ObjectUsageSlice {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ObjectUsageSlice();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.targetObj, () => message.targetObj = UsageSlice.TargetObj.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.definedBy, () => message.definedBy = UsageSlice.DefinedBy.deserialize(reader));
                            break;
                        case 3:
                            reader.readMessage(message.invokedCalls, () => pb_1.Message.addToRepeatedWrapperField(message, 3, UsageSlice.InvokedCalls.deserialize(reader), UsageSlice.InvokedCalls));
                            break;
                        case 4:
                            reader.readMessage(message.argToCalls, () => pb_1.Message.addToRepeatedWrapperField(message, 4, UsageSlice.ArgToCalls.deserialize(reader), UsageSlice.ArgToCalls));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ObjectUsageSlice {
                return ObjectUsageSlice.deserialize(bytes);
            }
        }
        export class MethodUsageSlice extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                code?: string;
                fullName?: string;
                fileName?: string;
                lineNumber?: number;
                columnNumber?: number;
                usages?: UsageSlice.ObjectUsageSlice[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("code" in data && data.code != undefined) {
                        this.code = data.code;
                    }
                    if ("fullName" in data && data.fullName != undefined) {
                        this.fullName = data.fullName;
                    }
                    if ("fileName" in data && data.fileName != undefined) {
                        this.fileName = data.fileName;
                    }
                    if ("lineNumber" in data && data.lineNumber != undefined) {
                        this.lineNumber = data.lineNumber;
                    }
                    if ("columnNumber" in data && data.columnNumber != undefined) {
                        this.columnNumber = data.columnNumber;
                    }
                    if ("usages" in data && data.usages != undefined) {
                        this.usages = data.usages;
                    }
                }
            }
            get code() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set code(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get fullName() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set fullName(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get fileName() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set fileName(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get lineNumber() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set lineNumber(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get columnNumber() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set columnNumber(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get usages() {
                return pb_1.Message.getRepeatedWrapperField(this, UsageSlice.ObjectUsageSlice, 6) as UsageSlice.ObjectUsageSlice[];
            }
            set usages(value: UsageSlice.ObjectUsageSlice[]) {
                pb_1.Message.setRepeatedWrapperField(this, 6, value);
            }
            static fromObject(data: {
                code?: string;
                fullName?: string;
                fileName?: string;
                lineNumber?: number;
                columnNumber?: number;
                usages?: ReturnType<typeof UsageSlice.ObjectUsageSlice.prototype.toObject>[];
            }): MethodUsageSlice {
                const message = new MethodUsageSlice({});
                if (data.code != null) {
                    message.code = data.code;
                }
                if (data.fullName != null) {
                    message.fullName = data.fullName;
                }
                if (data.fileName != null) {
                    message.fileName = data.fileName;
                }
                if (data.lineNumber != null) {
                    message.lineNumber = data.lineNumber;
                }
                if (data.columnNumber != null) {
                    message.columnNumber = data.columnNumber;
                }
                if (data.usages != null) {
                    message.usages = data.usages.map(item => UsageSlice.ObjectUsageSlice.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    code?: string;
                    fullName?: string;
                    fileName?: string;
                    lineNumber?: number;
                    columnNumber?: number;
                    usages?: ReturnType<typeof UsageSlice.ObjectUsageSlice.prototype.toObject>[];
                } = {};
                if (this.code != null) {
                    data.code = this.code;
                }
                if (this.fullName != null) {
                    data.fullName = this.fullName;
                }
                if (this.fileName != null) {
                    data.fileName = this.fileName;
                }
                if (this.lineNumber != null) {
                    data.lineNumber = this.lineNumber;
                }
                if (this.columnNumber != null) {
                    data.columnNumber = this.columnNumber;
                }
                if (this.usages != null) {
                    data.usages = this.usages.map((item: UsageSlice.ObjectUsageSlice) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.code.length)
                    writer.writeString(1, this.code);
                if (this.fullName.length)
                    writer.writeString(2, this.fullName);
                if (this.fileName.length)
                    writer.writeString(3, this.fileName);
                if (this.lineNumber != 0)
                    writer.writeUint32(4, this.lineNumber);
                if (this.columnNumber != 0)
                    writer.writeUint32(5, this.columnNumber);
                if (this.usages.length)
                    writer.writeRepeatedMessage(6, this.usages, (item: UsageSlice.ObjectUsageSlice) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MethodUsageSlice {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MethodUsageSlice();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.code = reader.readString();
                            break;
                        case 2:
                            message.fullName = reader.readString();
                            break;
                        case 3:
                            message.fileName = reader.readString();
                            break;
                        case 4:
                            message.lineNumber = reader.readUint32();
                            break;
                        case 5:
                            message.columnNumber = reader.readUint32();
                            break;
                        case 6:
                            reader.readMessage(message.usages, () => pb_1.Message.addToRepeatedWrapperField(message, 6, UsageSlice.ObjectUsageSlice.deserialize(reader), UsageSlice.ObjectUsageSlice));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): MethodUsageSlice {
                return MethodUsageSlice.deserialize(bytes);
            }
        }
        export class Fields extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                name?: string;
                typeFullName?: string;
                lineNumber?: number;
                columnNumber?: number;
                label?: UsageSlice.LabelType;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("typeFullName" in data && data.typeFullName != undefined) {
                        this.typeFullName = data.typeFullName;
                    }
                    if ("lineNumber" in data && data.lineNumber != undefined) {
                        this.lineNumber = data.lineNumber;
                    }
                    if ("columnNumber" in data && data.columnNumber != undefined) {
                        this.columnNumber = data.columnNumber;
                    }
                    if ("label" in data && data.label != undefined) {
                        this.label = data.label;
                    }
                }
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get typeFullName() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set typeFullName(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get lineNumber() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set lineNumber(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get columnNumber() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set columnNumber(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get label() {
                return pb_1.Message.getFieldWithDefault(this, 5, UsageSlice.LabelType.ANY) as UsageSlice.LabelType;
            }
            set label(value: UsageSlice.LabelType) {
                pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data: {
                name?: string;
                typeFullName?: string;
                lineNumber?: number;
                columnNumber?: number;
                label?: UsageSlice.LabelType;
            }): Fields {
                const message = new Fields({});
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.typeFullName != null) {
                    message.typeFullName = data.typeFullName;
                }
                if (data.lineNumber != null) {
                    message.lineNumber = data.lineNumber;
                }
                if (data.columnNumber != null) {
                    message.columnNumber = data.columnNumber;
                }
                if (data.label != null) {
                    message.label = data.label;
                }
                return message;
            }
            toObject() {
                const data: {
                    name?: string;
                    typeFullName?: string;
                    lineNumber?: number;
                    columnNumber?: number;
                    label?: UsageSlice.LabelType;
                } = {};
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.typeFullName != null) {
                    data.typeFullName = this.typeFullName;
                }
                if (this.lineNumber != null) {
                    data.lineNumber = this.lineNumber;
                }
                if (this.columnNumber != null) {
                    data.columnNumber = this.columnNumber;
                }
                if (this.label != null) {
                    data.label = this.label;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.name.length)
                    writer.writeString(1, this.name);
                if (this.typeFullName.length)
                    writer.writeString(2, this.typeFullName);
                if (this.lineNumber != 0)
                    writer.writeUint32(3, this.lineNumber);
                if (this.columnNumber != 0)
                    writer.writeUint32(4, this.columnNumber);
                if (this.label != UsageSlice.LabelType.ANY)
                    writer.writeEnum(5, this.label);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Fields {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Fields();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.name = reader.readString();
                            break;
                        case 2:
                            message.typeFullName = reader.readString();
                            break;
                        case 3:
                            message.lineNumber = reader.readUint32();
                            break;
                        case 4:
                            message.columnNumber = reader.readUint32();
                            break;
                        case 5:
                            message.label = reader.readEnum();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Fields {
                return Fields.deserialize(bytes);
            }
        }
        export class Procedures extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                callName?: string;
                resolvedMethod?: string;
                paramTypes?: string[];
                returnType?: string;
                lineNumber?: number;
                columnNumber?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("callName" in data && data.callName != undefined) {
                        this.callName = data.callName;
                    }
                    if ("resolvedMethod" in data && data.resolvedMethod != undefined) {
                        this.resolvedMethod = data.resolvedMethod;
                    }
                    if ("paramTypes" in data && data.paramTypes != undefined) {
                        this.paramTypes = data.paramTypes;
                    }
                    if ("returnType" in data && data.returnType != undefined) {
                        this.returnType = data.returnType;
                    }
                    if ("lineNumber" in data && data.lineNumber != undefined) {
                        this.lineNumber = data.lineNumber;
                    }
                    if ("columnNumber" in data && data.columnNumber != undefined) {
                        this.columnNumber = data.columnNumber;
                    }
                }
            }
            get callName() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set callName(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get resolvedMethod() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set resolvedMethod(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get paramTypes() {
                return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
            }
            set paramTypes(value: string[]) {
                pb_1.Message.setField(this, 3, value);
            }
            get returnType() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set returnType(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get lineNumber() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set lineNumber(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get columnNumber() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set columnNumber(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            static fromObject(data: {
                callName?: string;
                resolvedMethod?: string;
                paramTypes?: string[];
                returnType?: string;
                lineNumber?: number;
                columnNumber?: number;
            }): Procedures {
                const message = new Procedures({});
                if (data.callName != null) {
                    message.callName = data.callName;
                }
                if (data.resolvedMethod != null) {
                    message.resolvedMethod = data.resolvedMethod;
                }
                if (data.paramTypes != null) {
                    message.paramTypes = data.paramTypes;
                }
                if (data.returnType != null) {
                    message.returnType = data.returnType;
                }
                if (data.lineNumber != null) {
                    message.lineNumber = data.lineNumber;
                }
                if (data.columnNumber != null) {
                    message.columnNumber = data.columnNumber;
                }
                return message;
            }
            toObject() {
                const data: {
                    callName?: string;
                    resolvedMethod?: string;
                    paramTypes?: string[];
                    returnType?: string;
                    lineNumber?: number;
                    columnNumber?: number;
                } = {};
                if (this.callName != null) {
                    data.callName = this.callName;
                }
                if (this.resolvedMethod != null) {
                    data.resolvedMethod = this.resolvedMethod;
                }
                if (this.paramTypes != null) {
                    data.paramTypes = this.paramTypes;
                }
                if (this.returnType != null) {
                    data.returnType = this.returnType;
                }
                if (this.lineNumber != null) {
                    data.lineNumber = this.lineNumber;
                }
                if (this.columnNumber != null) {
                    data.columnNumber = this.columnNumber;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.callName.length)
                    writer.writeString(1, this.callName);
                if (this.resolvedMethod.length)
                    writer.writeString(2, this.resolvedMethod);
                if (this.paramTypes.length)
                    writer.writeRepeatedString(3, this.paramTypes);
                if (this.returnType.length)
                    writer.writeString(4, this.returnType);
                if (this.lineNumber != 0)
                    writer.writeUint32(5, this.lineNumber);
                if (this.columnNumber != 0)
                    writer.writeUint32(6, this.columnNumber);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Procedures {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Procedures();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.callName = reader.readString();
                            break;
                        case 2:
                            message.resolvedMethod = reader.readString();
                            break;
                        case 3:
                            pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                            break;
                        case 4:
                            message.returnType = reader.readString();
                            break;
                        case 5:
                            message.lineNumber = reader.readUint32();
                            break;
                        case 6:
                            message.columnNumber = reader.readUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Procedures {
                return Procedures.deserialize(bytes);
            }
        }
        export class UserDefinedTypes extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                name?: string;
                fields?: UsageSlice.Fields[];
                procedures?: UsageSlice.Procedures[];
                fileName?: string;
                lineNumber?: number;
                columnNumber?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("fields" in data && data.fields != undefined) {
                        this.fields = data.fields;
                    }
                    if ("procedures" in data && data.procedures != undefined) {
                        this.procedures = data.procedures;
                    }
                    if ("fileName" in data && data.fileName != undefined) {
                        this.fileName = data.fileName;
                    }
                    if ("lineNumber" in data && data.lineNumber != undefined) {
                        this.lineNumber = data.lineNumber;
                    }
                    if ("columnNumber" in data && data.columnNumber != undefined) {
                        this.columnNumber = data.columnNumber;
                    }
                }
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get fields() {
                return pb_1.Message.getRepeatedWrapperField(this, UsageSlice.Fields, 2) as UsageSlice.Fields[];
            }
            set fields(value: UsageSlice.Fields[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            get procedures() {
                return pb_1.Message.getRepeatedWrapperField(this, UsageSlice.Procedures, 3) as UsageSlice.Procedures[];
            }
            set procedures(value: UsageSlice.Procedures[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            get fileName() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set fileName(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get lineNumber() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set lineNumber(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get columnNumber() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set columnNumber(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            static fromObject(data: {
                name?: string;
                fields?: ReturnType<typeof UsageSlice.Fields.prototype.toObject>[];
                procedures?: ReturnType<typeof UsageSlice.Procedures.prototype.toObject>[];
                fileName?: string;
                lineNumber?: number;
                columnNumber?: number;
            }): UserDefinedTypes {
                const message = new UserDefinedTypes({});
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.fields != null) {
                    message.fields = data.fields.map(item => UsageSlice.Fields.fromObject(item));
                }
                if (data.procedures != null) {
                    message.procedures = data.procedures.map(item => UsageSlice.Procedures.fromObject(item));
                }
                if (data.fileName != null) {
                    message.fileName = data.fileName;
                }
                if (data.lineNumber != null) {
                    message.lineNumber = data.lineNumber;
                }
                if (data.columnNumber != null) {
                    message.columnNumber = data.columnNumber;
                }
                return message;
            }
            toObject() {
                const data: {
                    name?: string;
                    fields?: ReturnType<typeof UsageSlice.Fields.prototype.toObject>[];
                    procedures?: ReturnType<typeof UsageSlice.Procedures.prototype.toObject>[];
                    fileName?: string;
                    lineNumber?: number;
                    columnNumber?: number;
                } = {};
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.fields != null) {
                    data.fields = this.fields.map((item: UsageSlice.Fields) => item.toObject());
                }
                if (this.procedures != null) {
                    data.procedures = this.procedures.map((item: UsageSlice.Procedures) => item.toObject());
                }
                if (this.fileName != null) {
                    data.fileName = this.fileName;
                }
                if (this.lineNumber != null) {
                    data.lineNumber = this.lineNumber;
                }
                if (this.columnNumber != null) {
                    data.columnNumber = this.columnNumber;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.name.length)
                    writer.writeString(1, this.name);
                if (this.fields.length)
                    writer.writeRepeatedMessage(2, this.fields, (item: UsageSlice.Fields) => item.serialize(writer));
                if (this.procedures.length)
                    writer.writeRepeatedMessage(3, this.procedures, (item: UsageSlice.Procedures) => item.serialize(writer));
                if (this.fileName.length)
                    writer.writeString(4, this.fileName);
                if (this.lineNumber != 0)
                    writer.writeUint32(5, this.lineNumber);
                if (this.columnNumber != 0)
                    writer.writeUint32(6, this.columnNumber);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserDefinedTypes {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserDefinedTypes();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.name = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message.fields, () => pb_1.Message.addToRepeatedWrapperField(message, 2, UsageSlice.Fields.deserialize(reader), UsageSlice.Fields));
                            break;
                        case 3:
                            reader.readMessage(message.procedures, () => pb_1.Message.addToRepeatedWrapperField(message, 3, UsageSlice.Procedures.deserialize(reader), UsageSlice.Procedures));
                            break;
                        case 4:
                            message.fileName = reader.readString();
                            break;
                        case 5:
                            message.lineNumber = reader.readUint32();
                            break;
                        case 6:
                            message.columnNumber = reader.readUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): UserDefinedTypes {
                return UserDefinedTypes.deserialize(bytes);
            }
        }
    }
    export class DataFlowSlice extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            graph?: DataFlowSlice.Graph;
            path?: DataFlowSlice.Paths;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("graph" in data && data.graph != undefined) {
                    this.graph = data.graph;
                }
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
            }
        }
        get graph() {
            return pb_1.Message.getWrapperField(this, DataFlowSlice.Graph, 1) as DataFlowSlice.Graph;
        }
        set graph(value: DataFlowSlice.Graph) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_graph() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get path() {
            return pb_1.Message.getWrapperField(this, DataFlowSlice.Paths, 2) as DataFlowSlice.Paths;
        }
        set path(value: DataFlowSlice.Paths) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_path() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            graph?: ReturnType<typeof DataFlowSlice.Graph.prototype.toObject>;
            path?: ReturnType<typeof DataFlowSlice.Paths.prototype.toObject>;
        }): DataFlowSlice {
            const message = new DataFlowSlice({});
            if (data.graph != null) {
                message.graph = DataFlowSlice.Graph.fromObject(data.graph);
            }
            if (data.path != null) {
                message.path = DataFlowSlice.Paths.fromObject(data.path);
            }
            return message;
        }
        toObject() {
            const data: {
                graph?: ReturnType<typeof DataFlowSlice.Graph.prototype.toObject>;
                path?: ReturnType<typeof DataFlowSlice.Paths.prototype.toObject>;
            } = {};
            if (this.graph != null) {
                data.graph = this.graph.toObject();
            }
            if (this.path != null) {
                data.path = this.path.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_graph)
                writer.writeMessage(1, this.graph, () => this.graph.serialize(writer));
            if (this.has_path)
                writer.writeMessage(2, this.path, () => this.path.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataFlowSlice {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataFlowSlice();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.graph, () => message.graph = DataFlowSlice.Graph.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.path, () => message.path = DataFlowSlice.Paths.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DataFlowSlice {
            return DataFlowSlice.deserialize(bytes);
        }
    }
    export namespace DataFlowSlice {
        export class Nodes extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                id?: number;
                label?: NodeType;
                name?: string;
                fullName?: string;
                signature?: string;
                isExternal?: boolean;
                code?: string;
                typeFullName?: string;
                parentMethodName?: string;
                parentFileName?: string;
                parentPackageName?: string;
                parentClassName?: string;
                lineNumber?: number;
                columnNumber?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("label" in data && data.label != undefined) {
                        this.label = data.label;
                    }
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                    if ("fullName" in data && data.fullName != undefined) {
                        this.fullName = data.fullName;
                    }
                    if ("signature" in data && data.signature != undefined) {
                        this.signature = data.signature;
                    }
                    if ("isExternal" in data && data.isExternal != undefined) {
                        this.isExternal = data.isExternal;
                    }
                    if ("code" in data && data.code != undefined) {
                        this.code = data.code;
                    }
                    if ("typeFullName" in data && data.typeFullName != undefined) {
                        this.typeFullName = data.typeFullName;
                    }
                    if ("parentMethodName" in data && data.parentMethodName != undefined) {
                        this.parentMethodName = data.parentMethodName;
                    }
                    if ("parentFileName" in data && data.parentFileName != undefined) {
                        this.parentFileName = data.parentFileName;
                    }
                    if ("parentPackageName" in data && data.parentPackageName != undefined) {
                        this.parentPackageName = data.parentPackageName;
                    }
                    if ("parentClassName" in data && data.parentClassName != undefined) {
                        this.parentClassName = data.parentClassName;
                    }
                    if ("lineNumber" in data && data.lineNumber != undefined) {
                        this.lineNumber = data.lineNumber;
                    }
                    if ("columnNumber" in data && data.columnNumber != undefined) {
                        this.columnNumber = data.columnNumber;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set id(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get label() {
                return pb_1.Message.getFieldWithDefault(this, 2, NodeType.UNKNOWN_NODE_TYPE) as NodeType;
            }
            set label(value: NodeType) {
                pb_1.Message.setField(this, 2, value);
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get fullName() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set fullName(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get signature() {
                return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }
            set signature(value: string) {
                pb_1.Message.setField(this, 5, value);
            }
            get isExternal() {
                return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
            }
            set isExternal(value: boolean) {
                pb_1.Message.setField(this, 6, value);
            }
            get code() {
                return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
            }
            set code(value: string) {
                pb_1.Message.setField(this, 7, value);
            }
            get typeFullName() {
                return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
            }
            set typeFullName(value: string) {
                pb_1.Message.setField(this, 8, value);
            }
            get parentMethodName() {
                return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
            }
            set parentMethodName(value: string) {
                pb_1.Message.setField(this, 9, value);
            }
            get parentFileName() {
                return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
            }
            set parentFileName(value: string) {
                pb_1.Message.setField(this, 10, value);
            }
            get parentPackageName() {
                return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
            }
            set parentPackageName(value: string) {
                pb_1.Message.setField(this, 11, value);
            }
            get parentClassName() {
                return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
            }
            set parentClassName(value: string) {
                pb_1.Message.setField(this, 12, value);
            }
            get lineNumber() {
                return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
            }
            set lineNumber(value: number) {
                pb_1.Message.setField(this, 13, value);
            }
            get columnNumber() {
                return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
            }
            set columnNumber(value: number) {
                pb_1.Message.setField(this, 14, value);
            }
            static fromObject(data: {
                id?: number;
                label?: NodeType;
                name?: string;
                fullName?: string;
                signature?: string;
                isExternal?: boolean;
                code?: string;
                typeFullName?: string;
                parentMethodName?: string;
                parentFileName?: string;
                parentPackageName?: string;
                parentClassName?: string;
                lineNumber?: number;
                columnNumber?: number;
            }): Nodes {
                const message = new Nodes({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.label != null) {
                    message.label = data.label;
                }
                if (data.name != null) {
                    message.name = data.name;
                }
                if (data.fullName != null) {
                    message.fullName = data.fullName;
                }
                if (data.signature != null) {
                    message.signature = data.signature;
                }
                if (data.isExternal != null) {
                    message.isExternal = data.isExternal;
                }
                if (data.code != null) {
                    message.code = data.code;
                }
                if (data.typeFullName != null) {
                    message.typeFullName = data.typeFullName;
                }
                if (data.parentMethodName != null) {
                    message.parentMethodName = data.parentMethodName;
                }
                if (data.parentFileName != null) {
                    message.parentFileName = data.parentFileName;
                }
                if (data.parentPackageName != null) {
                    message.parentPackageName = data.parentPackageName;
                }
                if (data.parentClassName != null) {
                    message.parentClassName = data.parentClassName;
                }
                if (data.lineNumber != null) {
                    message.lineNumber = data.lineNumber;
                }
                if (data.columnNumber != null) {
                    message.columnNumber = data.columnNumber;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: number;
                    label?: NodeType;
                    name?: string;
                    fullName?: string;
                    signature?: string;
                    isExternal?: boolean;
                    code?: string;
                    typeFullName?: string;
                    parentMethodName?: string;
                    parentFileName?: string;
                    parentPackageName?: string;
                    parentClassName?: string;
                    lineNumber?: number;
                    columnNumber?: number;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.label != null) {
                    data.label = this.label;
                }
                if (this.name != null) {
                    data.name = this.name;
                }
                if (this.fullName != null) {
                    data.fullName = this.fullName;
                }
                if (this.signature != null) {
                    data.signature = this.signature;
                }
                if (this.isExternal != null) {
                    data.isExternal = this.isExternal;
                }
                if (this.code != null) {
                    data.code = this.code;
                }
                if (this.typeFullName != null) {
                    data.typeFullName = this.typeFullName;
                }
                if (this.parentMethodName != null) {
                    data.parentMethodName = this.parentMethodName;
                }
                if (this.parentFileName != null) {
                    data.parentFileName = this.parentFileName;
                }
                if (this.parentPackageName != null) {
                    data.parentPackageName = this.parentPackageName;
                }
                if (this.parentClassName != null) {
                    data.parentClassName = this.parentClassName;
                }
                if (this.lineNumber != null) {
                    data.lineNumber = this.lineNumber;
                }
                if (this.columnNumber != null) {
                    data.columnNumber = this.columnNumber;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.id != 0)
                    writer.writeUint32(1, this.id);
                if (this.label != NodeType.UNKNOWN_NODE_TYPE)
                    writer.writeEnum(2, this.label);
                if (this.name.length)
                    writer.writeString(3, this.name);
                if (this.fullName.length)
                    writer.writeString(4, this.fullName);
                if (this.signature.length)
                    writer.writeString(5, this.signature);
                if (this.isExternal != false)
                    writer.writeBool(6, this.isExternal);
                if (this.code.length)
                    writer.writeString(7, this.code);
                if (this.typeFullName.length)
                    writer.writeString(8, this.typeFullName);
                if (this.parentMethodName.length)
                    writer.writeString(9, this.parentMethodName);
                if (this.parentFileName.length)
                    writer.writeString(10, this.parentFileName);
                if (this.parentPackageName.length)
                    writer.writeString(11, this.parentPackageName);
                if (this.parentClassName.length)
                    writer.writeString(12, this.parentClassName);
                if (this.lineNumber != 0)
                    writer.writeUint32(13, this.lineNumber);
                if (this.columnNumber != 0)
                    writer.writeUint32(14, this.columnNumber);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Nodes {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Nodes();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readUint32();
                            break;
                        case 2:
                            message.label = reader.readEnum();
                            break;
                        case 3:
                            message.name = reader.readString();
                            break;
                        case 4:
                            message.fullName = reader.readString();
                            break;
                        case 5:
                            message.signature = reader.readString();
                            break;
                        case 6:
                            message.isExternal = reader.readBool();
                            break;
                        case 7:
                            message.code = reader.readString();
                            break;
                        case 8:
                            message.typeFullName = reader.readString();
                            break;
                        case 9:
                            message.parentMethodName = reader.readString();
                            break;
                        case 10:
                            message.parentFileName = reader.readString();
                            break;
                        case 11:
                            message.parentPackageName = reader.readString();
                            break;
                        case 12:
                            message.parentClassName = reader.readString();
                            break;
                        case 13:
                            message.lineNumber = reader.readUint32();
                            break;
                        case 14:
                            message.columnNumber = reader.readUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Nodes {
                return Nodes.deserialize(bytes);
            }
        }
        export class Edges extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                src?: number;
                dst?: number;
                label?: CpgStruct.Edge.EdgeType;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("src" in data && data.src != undefined) {
                        this.src = data.src;
                    }
                    if ("dst" in data && data.dst != undefined) {
                        this.dst = data.dst;
                    }
                    if ("label" in data && data.label != undefined) {
                        this.label = data.label;
                    }
                }
            }
            get src() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set src(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get dst() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set dst(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get label() {
                return pb_1.Message.getFieldWithDefault(this, 3, CpgStruct.Edge.EdgeType.UNKNOWN_EDGE_TYPE) as CpgStruct.Edge.EdgeType;
            }
            set label(value: CpgStruct.Edge.EdgeType) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                src?: number;
                dst?: number;
                label?: CpgStruct.Edge.EdgeType;
            }): Edges {
                const message = new Edges({});
                if (data.src != null) {
                    message.src = data.src;
                }
                if (data.dst != null) {
                    message.dst = data.dst;
                }
                if (data.label != null) {
                    message.label = data.label;
                }
                return message;
            }
            toObject() {
                const data: {
                    src?: number;
                    dst?: number;
                    label?: CpgStruct.Edge.EdgeType;
                } = {};
                if (this.src != null) {
                    data.src = this.src;
                }
                if (this.dst != null) {
                    data.dst = this.dst;
                }
                if (this.label != null) {
                    data.label = this.label;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.src != 0)
                    writer.writeUint32(1, this.src);
                if (this.dst != 0)
                    writer.writeUint32(2, this.dst);
                if (this.label != CpgStruct.Edge.EdgeType.UNKNOWN_EDGE_TYPE)
                    writer.writeEnum(3, this.label);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Edges {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Edges();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.src = reader.readUint32();
                            break;
                        case 2:
                            message.dst = reader.readUint32();
                            break;
                        case 3:
                            message.label = reader.readEnum();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Edges {
                return Edges.deserialize(bytes);
            }
        }
        export class Flows extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                id?: number[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
            }
            set id(value: number[]) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                id?: number[];
            }): Flows {
                const message = new Flows({});
                if (data.id != null) {
                    message.id = data.id;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: number[];
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.id.length)
                    writer.writePackedUint32(1, this.id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Flows {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Flows();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readPackedUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Flows {
                return Flows.deserialize(bytes);
            }
        }
        export class Paths extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                flows?: DataFlowSlice.Flows[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("flows" in data && data.flows != undefined) {
                        this.flows = data.flows;
                    }
                }
            }
            get flows() {
                return pb_1.Message.getRepeatedWrapperField(this, DataFlowSlice.Flows, 1) as DataFlowSlice.Flows[];
            }
            set flows(value: DataFlowSlice.Flows[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            static fromObject(data: {
                flows?: ReturnType<typeof DataFlowSlice.Flows.prototype.toObject>[];
            }): Paths {
                const message = new Paths({});
                if (data.flows != null) {
                    message.flows = data.flows.map(item => DataFlowSlice.Flows.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    flows?: ReturnType<typeof DataFlowSlice.Flows.prototype.toObject>[];
                } = {};
                if (this.flows != null) {
                    data.flows = this.flows.map((item: DataFlowSlice.Flows) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.flows.length)
                    writer.writeRepeatedMessage(1, this.flows, (item: DataFlowSlice.Flows) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Paths {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Paths();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.flows, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DataFlowSlice.Flows.deserialize(reader), DataFlowSlice.Flows));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Paths {
                return Paths.deserialize(bytes);
            }
        }
        export class Graph extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                nodes?: DataFlowSlice.Nodes[];
                edges?: DataFlowSlice.Edges[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("nodes" in data && data.nodes != undefined) {
                        this.nodes = data.nodes;
                    }
                    if ("edges" in data && data.edges != undefined) {
                        this.edges = data.edges;
                    }
                }
            }
            get nodes() {
                return pb_1.Message.getRepeatedWrapperField(this, DataFlowSlice.Nodes, 1) as DataFlowSlice.Nodes[];
            }
            set nodes(value: DataFlowSlice.Nodes[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get edges() {
                return pb_1.Message.getRepeatedWrapperField(this, DataFlowSlice.Edges, 2) as DataFlowSlice.Edges[];
            }
            set edges(value: DataFlowSlice.Edges[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data: {
                nodes?: ReturnType<typeof DataFlowSlice.Nodes.prototype.toObject>[];
                edges?: ReturnType<typeof DataFlowSlice.Edges.prototype.toObject>[];
            }): Graph {
                const message = new Graph({});
                if (data.nodes != null) {
                    message.nodes = data.nodes.map(item => DataFlowSlice.Nodes.fromObject(item));
                }
                if (data.edges != null) {
                    message.edges = data.edges.map(item => DataFlowSlice.Edges.fromObject(item));
                }
                return message;
            }
            toObject() {
                const data: {
                    nodes?: ReturnType<typeof DataFlowSlice.Nodes.prototype.toObject>[];
                    edges?: ReturnType<typeof DataFlowSlice.Edges.prototype.toObject>[];
                } = {};
                if (this.nodes != null) {
                    data.nodes = this.nodes.map((item: DataFlowSlice.Nodes) => item.toObject());
                }
                if (this.edges != null) {
                    data.edges = this.edges.map((item: DataFlowSlice.Edges) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.nodes.length)
                    writer.writeRepeatedMessage(1, this.nodes, (item: DataFlowSlice.Nodes) => item.serialize(writer));
                if (this.edges.length)
                    writer.writeRepeatedMessage(2, this.edges, (item: DataFlowSlice.Edges) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Graph {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Graph();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.nodes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DataFlowSlice.Nodes.deserialize(reader), DataFlowSlice.Nodes));
                            break;
                        case 2:
                            reader.readMessage(message.edges, () => pb_1.Message.addToRepeatedWrapperField(message, 2, DataFlowSlice.Edges.deserialize(reader), DataFlowSlice.Edges));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Graph {
                return Graph.deserialize(bytes);
            }
        }
    }
}
